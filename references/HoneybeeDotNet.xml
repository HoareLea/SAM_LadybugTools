<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HoneybeeDotNet</name>
    </assembly>
    <members>
        <member name="T:HoneybeeDotNet.Adiabatic">
            <summary>
            Adiabatic
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Adiabatic" /> class.
            </summary>
            <param name="type">type (default to &quot;Adiabatic&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.Adiabatic.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Adiabatic object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.Equals(HoneybeeDotNet.Adiabatic)">
            <summary>
            Returns true if Adiabatic instances are equal
            </summary>
            <param name="input">Instance of Adiabatic to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Adiabatic.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Aperture">
            <summary>
            Base class for all objects requiring a valid names for all engines.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Aperture" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.#ctor(System.String,HoneybeeDotNet.Face3D,HoneybeeDotNet.AnyOf{HoneybeeDotNet.Outdoors,HoneybeeDotNet.Surface},HoneybeeDotNet.AperturePropertiesAbridged,System.String,System.String,System.Boolean,System.Collections.Generic.List{HoneybeeDotNet.Shade},System.Collections.Generic.List{HoneybeeDotNet.Shade})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Aperture" /> class.
            </summary>
            <param name="name">Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters. (required).</param>
            <param name="geometry">Planar Face3D for the geometry. (required).</param>
            <param name="boundaryCondition">boundaryCondition (required).</param>
            <param name="properties">Extension properties for particular simulation engines (Radiance, EnergyPlus). (required).</param>
            <param name="displayName">Display name of the object with no restrictions..</param>
            <param name="type">type (default to &quot;Aperture&quot;).</param>
            <param name="isOperable">Boolean to note whether the Aperture can be opened for ventilation. (default to false).</param>
            <param name="indoorShades">Shades assigned to the interior side of this object (eg. window sill, light shelf)..</param>
            <param name="outdoorShades">Shades assigned to the exterior side of this object (eg. mullions, louvers)..</param>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.Name">
            <summary>
            Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.Geometry">
            <summary>
            Planar Face3D for the geometry.
            </summary>
            <value>Planar Face3D for the geometry.</value>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.BoundaryCondition">
            <summary>
            Gets or Sets BoundaryCondition
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.Properties">
            <summary>
            Extension properties for particular simulation engines (Radiance, EnergyPlus).
            </summary>
            <value>Extension properties for particular simulation engines (Radiance, EnergyPlus).</value>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.DisplayName">
            <summary>
            Display name of the object with no restrictions.
            </summary>
            <value>Display name of the object with no restrictions.</value>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.IsOperable">
            <summary>
            Boolean to note whether the Aperture can be opened for ventilation.
            </summary>
            <value>Boolean to note whether the Aperture can be opened for ventilation.</value>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.IndoorShades">
            <summary>
            Shades assigned to the interior side of this object (eg. window sill, light shelf).
            </summary>
            <value>Shades assigned to the interior side of this object (eg. window sill, light shelf).</value>
        </member>
        <member name="P:HoneybeeDotNet.Aperture.OutdoorShades">
            <summary>
            Shades assigned to the exterior side of this object (eg. mullions, louvers).
            </summary>
            <value>Shades assigned to the exterior side of this object (eg. mullions, louvers).</value>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Aperture object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.Equals(HoneybeeDotNet.Aperture)">
            <summary>
            Returns true if Aperture instances are equal
            </summary>
            <param name="input">Instance of Aperture to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Aperture.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ApertureEnergyPropertiesAbridged">
            <summary>
            ApertureEnergyPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ApertureEnergyPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;ApertureEnergyPropertiesAbridged&quot;).</param>
            <param name="construction">Name of a WindowConstruction for the aperture. If None, the construction is set by the parent Room construction_set or the Model global_construction_set..</param>
        </member>
        <member name="P:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.Construction">
            <summary>
            Name of a WindowConstruction for the aperture. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.
            </summary>
            <value>Name of a WindowConstruction for the aperture. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.</value>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ApertureEnergyPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.Equals(HoneybeeDotNet.ApertureEnergyPropertiesAbridged)">
            <summary>
            Returns true if ApertureEnergyPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of ApertureEnergyPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureEnergyPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.AperturePropertiesAbridged">
            <summary>
            AperturePropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.#ctor(System.String,HoneybeeDotNet.ApertureEnergyPropertiesAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.AperturePropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;AperturePropertiesAbridged&quot;).</param>
            <param name="energy">energy.</param>
        </member>
        <member name="P:HoneybeeDotNet.AperturePropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.AperturePropertiesAbridged.Energy">
            <summary>
            Gets or Sets Energy
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>AperturePropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.Equals(HoneybeeDotNet.AperturePropertiesAbridged)">
            <summary>
            Returns true if AperturePropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of AperturePropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.AperturePropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ApertureSetAbridged">
            <summary>
            A set of constructions for aperture assemblies.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ApertureSetAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;ApertureSetAbridged&quot;).</param>
            <param name="interiorConstruction">Name for a WindowConstruction for apertures with an Outdoors boundary condition, False is_operable property, and a Wall face type for their parent face..</param>
            <param name="windowConstruction">Name for a WindowConstruction for all apertures with a Surface boundary condition..</param>
            <param name="skylightConstruction">Name for a WindowConstruction for apertures with a Outdoors boundary condition, False is_operable property, and a RoofCeiling or Floor face type for their parent face..</param>
            <param name="operableConstruction">Name for a WindowConstruction for all apertures with an Outdoors boundary condition and True is_operable property...</param>
        </member>
        <member name="P:HoneybeeDotNet.ApertureSetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ApertureSetAbridged.InteriorConstruction">
            <summary>
            Name for a WindowConstruction for apertures with an Outdoors boundary condition, False is_operable property, and a Wall face type for their parent face.
            </summary>
            <value>Name for a WindowConstruction for apertures with an Outdoors boundary condition, False is_operable property, and a Wall face type for their parent face.</value>
        </member>
        <member name="P:HoneybeeDotNet.ApertureSetAbridged.WindowConstruction">
            <summary>
            Name for a WindowConstruction for all apertures with a Surface boundary condition.
            </summary>
            <value>Name for a WindowConstruction for all apertures with a Surface boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.ApertureSetAbridged.SkylightConstruction">
            <summary>
            Name for a WindowConstruction for apertures with a Outdoors boundary condition, False is_operable property, and a RoofCeiling or Floor face type for their parent face.
            </summary>
            <value>Name for a WindowConstruction for apertures with a Outdoors boundary condition, False is_operable property, and a RoofCeiling or Floor face type for their parent face.</value>
        </member>
        <member name="P:HoneybeeDotNet.ApertureSetAbridged.OperableConstruction">
            <summary>
            Name for a WindowConstruction for all apertures with an Outdoors boundary condition and True is_operable property..
            </summary>
            <value>Name for a WindowConstruction for all apertures with an Outdoors boundary condition and True is_operable property..</value>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ApertureSetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.Equals(HoneybeeDotNet.ApertureSetAbridged)">
            <summary>
            Returns true if ApertureSetAbridged instances are equal
            </summary>
            <param name="input">Instance of ApertureSetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ApertureSetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ASHRAEClearSky">
            <summary>
            Used to specify sky conditions on a design day.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ASHRAEClearSky" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.#ctor(System.Collections.Generic.List{System.Int32},System.Double,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ASHRAEClearSky" /> class.
            </summary>
            <param name="date">A list of two integers for [month, day], representing the date for the day of the year on which the design day occurs.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case). (required).</param>
            <param name="clearness">Value between 0 and 1.2 that will get multiplied by the irradinace to correct for factors like elevation above sea level. (required).</param>
            <param name="daylightSavings">Boolean to indicate whether daylight savings time is active on the design day. (default to false).</param>
            <param name="type">type (default to &quot;ASHRAEClearSky&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAEClearSky.Date">
            <summary>
            A list of two integers for [month, day], representing the date for the day of the year on which the design day occurs.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).
            </summary>
            <value>A list of two integers for [month, day], representing the date for the day of the year on which the design day occurs.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAEClearSky.Clearness">
            <summary>
            Value between 0 and 1.2 that will get multiplied by the irradinace to correct for factors like elevation above sea level.
            </summary>
            <value>Value between 0 and 1.2 that will get multiplied by the irradinace to correct for factors like elevation above sea level.</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAEClearSky.DaylightSavings">
            <summary>
            Boolean to indicate whether daylight savings time is active on the design day.
            </summary>
            <value>Boolean to indicate whether daylight savings time is active on the design day.</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAEClearSky.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ASHRAEClearSky object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.Equals(HoneybeeDotNet.ASHRAEClearSky)">
            <summary>
            Returns true if ASHRAEClearSky instances are equal
            </summary>
            <param name="input">Instance of ASHRAEClearSky to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAEClearSky.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ASHRAETau">
            <summary>
            Used to specify sky conditions on a design day.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ASHRAETau" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.#ctor(System.Collections.Generic.List{System.Int32},System.Double,System.Double,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ASHRAETau" /> class.
            </summary>
            <param name="date">A list of two integers for [month, day], representing the date for the day of the year on which the design day occurs.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case). (required).</param>
            <param name="tauB">Value for the beam optical depth. Typically found in .stat files. (required).</param>
            <param name="tauD">Value for the diffuse optical depth. Typically found in .stat files. (required).</param>
            <param name="daylightSavings">Boolean to indicate whether daylight savings time is active on the design day. (default to false).</param>
            <param name="type">type (default to &quot;ASHRAETau&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAETau.Date">
            <summary>
            A list of two integers for [month, day], representing the date for the day of the year on which the design day occurs.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).
            </summary>
            <value>A list of two integers for [month, day], representing the date for the day of the year on which the design day occurs.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAETau.TauB">
            <summary>
            Value for the beam optical depth. Typically found in .stat files.
            </summary>
            <value>Value for the beam optical depth. Typically found in .stat files.</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAETau.TauD">
            <summary>
            Value for the diffuse optical depth. Typically found in .stat files.
            </summary>
            <value>Value for the diffuse optical depth. Typically found in .stat files.</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAETau.DaylightSavings">
            <summary>
            Boolean to indicate whether daylight savings time is active on the design day.
            </summary>
            <value>Boolean to indicate whether daylight savings time is active on the design day.</value>
        </member>
        <member name="P:HoneybeeDotNet.ASHRAETau.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ASHRAETau object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.Equals(HoneybeeDotNet.ASHRAETau)">
            <summary>
            Returns true if ASHRAETau instances are equal
            </summary>
            <param name="input">Instance of ASHRAETau to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ASHRAETau.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Autocalculate">
            <summary>
            Autocalculate
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Autocalculate" /> class.
            </summary>
            <param name="type">type (default to &quot;Autocalculate&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.Autocalculate.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Autocalculate object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.Equals(HoneybeeDotNet.Autocalculate)">
            <summary>
            Returns true if Autocalculate instances are equal
            </summary>
            <param name="input">Instance of Autocalculate to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autocalculate.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Autosize">
            <summary>
            Autosize
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Autosize" /> class.
            </summary>
            <param name="type">type (default to &quot;Autosize&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.Autosize.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Autosize object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.Equals(HoneybeeDotNet.Autosize)">
            <summary>
            Returns true if Autosize instances are equal
            </summary>
            <param name="input">Instance of Autosize to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Autosize.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ConstructionSetAbridged">
            <summary>
            A set of constructions for different surface types and boundary conditions.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ConstructionSetAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.#ctor(System.String,System.String,HoneybeeDotNet.WallSetAbridged,HoneybeeDotNet.FloorSetAbridged,HoneybeeDotNet.RoofCeilingSetAbridged,HoneybeeDotNet.ApertureSetAbridged,HoneybeeDotNet.DoorSetAbridged,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ConstructionSetAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;ConstructionSetAbridged&quot;).</param>
            <param name="wallSet">A WallSet object for this ConstructionSet..</param>
            <param name="floorSet">A FloorSet object for this ConstructionSet..</param>
            <param name="roofCeilingSet">A RoofCeilingSet object for this ConstructionSet..</param>
            <param name="apertureSet">A ApertureSet object for this ConstructionSet..</param>
            <param name="doorSet">A DoorSet object for this ConstructionSet..</param>
            <param name="shadeConstruction">A ShadeConstruction to set the reflectance properties of all outdoor shades to which this ConstructionSet is assigned..</param>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.WallSet">
            <summary>
            A WallSet object for this ConstructionSet.
            </summary>
            <value>A WallSet object for this ConstructionSet.</value>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.FloorSet">
            <summary>
            A FloorSet object for this ConstructionSet.
            </summary>
            <value>A FloorSet object for this ConstructionSet.</value>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.RoofCeilingSet">
            <summary>
            A RoofCeilingSet object for this ConstructionSet.
            </summary>
            <value>A RoofCeilingSet object for this ConstructionSet.</value>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.ApertureSet">
            <summary>
            A ApertureSet object for this ConstructionSet.
            </summary>
            <value>A ApertureSet object for this ConstructionSet.</value>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.DoorSet">
            <summary>
            A DoorSet object for this ConstructionSet.
            </summary>
            <value>A DoorSet object for this ConstructionSet.</value>
        </member>
        <member name="P:HoneybeeDotNet.ConstructionSetAbridged.ShadeConstruction">
            <summary>
            A ShadeConstruction to set the reflectance properties of all outdoor shades to which this ConstructionSet is assigned.
            </summary>
            <value>A ShadeConstruction to set the reflectance properties of all outdoor shades to which this ConstructionSet is assigned.</value>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ConstructionSetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.Equals(HoneybeeDotNet.ConstructionSetAbridged)">
            <summary>
            Returns true if ConstructionSetAbridged instances are equal
            </summary>
            <param name="input">Instance of ConstructionSetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ConstructionSetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.DaylightSavingTime">
            <summary>
            Used to describe the daylight savings time for the simulation.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.#ctor(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DaylightSavingTime" /> class.
            </summary>
            <param name="type">type (default to &quot;DaylightSavingTime&quot;).</param>
            <param name="startDate">A list of two integers for [month, day], representing the date for the start of daylight savings time. Default: 12 Mar (daylight savings in the US in 2017)..</param>
            <param name="endDate">A list of two integers for [month, day], representing the date for the end of daylight savings time. Default: 5 Nov (daylight savings in the US in 2017)..</param>
        </member>
        <member name="P:HoneybeeDotNet.DaylightSavingTime.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.DaylightSavingTime.StartDate">
            <summary>
            A list of two integers for [month, day], representing the date for the start of daylight savings time. Default: 12 Mar (daylight savings in the US in 2017).
            </summary>
            <value>A list of two integers for [month, day], representing the date for the start of daylight savings time. Default: 12 Mar (daylight savings in the US in 2017).</value>
        </member>
        <member name="P:HoneybeeDotNet.DaylightSavingTime.EndDate">
            <summary>
            A list of two integers for [month, day], representing the date for the end of daylight savings time. Default: 5 Nov (daylight savings in the US in 2017).
            </summary>
            <value>A list of two integers for [month, day], representing the date for the end of daylight savings time. Default: 5 Nov (daylight savings in the US in 2017).</value>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>DaylightSavingTime object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.Equals(HoneybeeDotNet.DaylightSavingTime)">
            <summary>
            Returns true if DaylightSavingTime instances are equal
            </summary>
            <param name="input">Instance of DaylightSavingTime to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.DaylightSavingTime.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.DesignDay">
            <summary>
            An object representing design day conditions.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.DesignDay.DayTypeEnum">
            <summary>
            Defines DayType
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.SummerDesignDay">
            <summary>
            Enum SummerDesignDay for value: SummerDesignDay
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.WinterDesignDay">
            <summary>
            Enum WinterDesignDay for value: WinterDesignDay
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Sunday">
            <summary>
            Enum Sunday for value: Sunday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Monday">
            <summary>
            Enum Monday for value: Monday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Tuesday">
            <summary>
            Enum Tuesday for value: Tuesday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Wednesday">
            <summary>
            Enum Wednesday for value: Wednesday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Thursday">
            <summary>
            Enum Thursday for value: Thursday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Friday">
            <summary>
            Enum Friday for value: Friday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.Holiday">
            <summary>
            Enum Holiday for value: Holiday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.CustomDay1">
            <summary>
            Enum CustomDay1 for value: CustomDay1
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.DesignDay.DayTypeEnum.CustomDay2">
            <summary>
            Enum CustomDay2 for value: CustomDay2
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.DayType">
            <summary>
            Gets or Sets DayType
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DesignDay" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.#ctor(System.String,HoneybeeDotNet.DesignDay.DayTypeEnum,HoneybeeDotNet.DryBulbCondition,HoneybeeDotNet.HumidityCondition,HoneybeeDotNet.WindCondition,HoneybeeDotNet.AnyOf{HoneybeeDotNet.ASHRAEClearSky,HoneybeeDotNet.ASHRAETau},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DesignDay" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="dayType">dayType (required).</param>
            <param name="dryBulbCondition">A DryBulbCondition describing temperature conditions on the design day. (required).</param>
            <param name="humidityCondition">A HumidityCondition describing humidity and precipitation conditions on the design day. (required).</param>
            <param name="windCondition">A WindCondition describing wind conditions on the design day. (required).</param>
            <param name="skyCondition">skyCondition (required).</param>
            <param name="type">type (default to &quot;DesignDay&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.DryBulbCondition">
            <summary>
            A DryBulbCondition describing temperature conditions on the design day.
            </summary>
            <value>A DryBulbCondition describing temperature conditions on the design day.</value>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.HumidityCondition">
            <summary>
            A HumidityCondition describing humidity and precipitation conditions on the design day.
            </summary>
            <value>A HumidityCondition describing humidity and precipitation conditions on the design day.</value>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.WindCondition">
            <summary>
            A WindCondition describing wind conditions on the design day.
            </summary>
            <value>A WindCondition describing wind conditions on the design day.</value>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.SkyCondition">
            <summary>
            Gets or Sets SkyCondition
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.DesignDay.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>DesignDay object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.Equals(HoneybeeDotNet.DesignDay)">
            <summary>
            Returns true if DesignDay instances are equal
            </summary>
            <param name="input">Instance of DesignDay to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.DesignDay.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Door">
            <summary>
            Base class for all objects requiring a valid names for all engines.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Door.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Door" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Door.#ctor(System.String,HoneybeeDotNet.Face3D,HoneybeeDotNet.AnyOf{HoneybeeDotNet.Outdoors,HoneybeeDotNet.Surface},HoneybeeDotNet.DoorPropertiesAbridged,System.String,System.String,System.Boolean,System.Collections.Generic.List{HoneybeeDotNet.Shade},System.Collections.Generic.List{HoneybeeDotNet.Shade})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Door" /> class.
            </summary>
            <param name="name">Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters. (required).</param>
            <param name="geometry">Planar Face3D for the geometry. (required).</param>
            <param name="boundaryCondition">boundaryCondition (required).</param>
            <param name="properties">Extension properties for particular simulation engines (Radiance, EnergyPlus). (required).</param>
            <param name="displayName">Display name of the object with no restrictions..</param>
            <param name="type">type (default to &quot;Door&quot;).</param>
            <param name="isGlass">Boolean to note whether this object is a glass door as opposed to an opaque door. (default to false).</param>
            <param name="indoorShades">Shades assigned to the interior side of this object..</param>
            <param name="outdoorShades">Shades assigned to the exterior side of this object (eg. entryway awning)..</param>
        </member>
        <member name="P:HoneybeeDotNet.Door.Name">
            <summary>
            Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.Door.Geometry">
            <summary>
            Planar Face3D for the geometry.
            </summary>
            <value>Planar Face3D for the geometry.</value>
        </member>
        <member name="P:HoneybeeDotNet.Door.BoundaryCondition">
            <summary>
            Gets or Sets BoundaryCondition
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Door.Properties">
            <summary>
            Extension properties for particular simulation engines (Radiance, EnergyPlus).
            </summary>
            <value>Extension properties for particular simulation engines (Radiance, EnergyPlus).</value>
        </member>
        <member name="P:HoneybeeDotNet.Door.DisplayName">
            <summary>
            Display name of the object with no restrictions.
            </summary>
            <value>Display name of the object with no restrictions.</value>
        </member>
        <member name="P:HoneybeeDotNet.Door.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Door.IsGlass">
            <summary>
            Boolean to note whether this object is a glass door as opposed to an opaque door.
            </summary>
            <value>Boolean to note whether this object is a glass door as opposed to an opaque door.</value>
        </member>
        <member name="P:HoneybeeDotNet.Door.IndoorShades">
            <summary>
            Shades assigned to the interior side of this object.
            </summary>
            <value>Shades assigned to the interior side of this object.</value>
        </member>
        <member name="P:HoneybeeDotNet.Door.OutdoorShades">
            <summary>
            Shades assigned to the exterior side of this object (eg. entryway awning).
            </summary>
            <value>Shades assigned to the exterior side of this object (eg. entryway awning).</value>
        </member>
        <member name="M:HoneybeeDotNet.Door.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Door object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.Equals(HoneybeeDotNet.Door)">
            <summary>
            Returns true if Door instances are equal
            </summary>
            <param name="input">Instance of Door to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="M:HoneybeeDotNet.Door.#ctor(System.String,HoneybeeDotNet.Face3D)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Door" /> with minimum outdoor type parameters.
            </summary>
            <param name="name"></param>
            <param name="geometry"></param>
        </member>
        <member name="T:HoneybeeDotNet.DoorEnergyPropertiesAbridged">
            <summary>
            DoorEnergyPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DoorEnergyPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;DoorEnergyPropertiesAbridged&quot;).</param>
            <param name="construction">Name of an OpaqueConstruction or WindowConstruction for the door. Note that the host door must have the is_glass property set to True to assign a WindowConstruction. If None, the construction is set by theparent Room construction_set or the Model global_construction_set..</param>
        </member>
        <member name="P:HoneybeeDotNet.DoorEnergyPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.DoorEnergyPropertiesAbridged.Construction">
            <summary>
            Name of an OpaqueConstruction or WindowConstruction for the door. Note that the host door must have the is_glass property set to True to assign a WindowConstruction. If None, the construction is set by theparent Room construction_set or the Model global_construction_set.
            </summary>
            <value>Name of an OpaqueConstruction or WindowConstruction for the door. Note that the host door must have the is_glass property set to True to assign a WindowConstruction. If None, the construction is set by theparent Room construction_set or the Model global_construction_set.</value>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>DoorEnergyPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.Equals(HoneybeeDotNet.DoorEnergyPropertiesAbridged)">
            <summary>
            Returns true if DoorEnergyPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of DoorEnergyPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorEnergyPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.DoorPropertiesAbridged">
            <summary>
            DoorPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.#ctor(System.String,HoneybeeDotNet.DoorEnergyPropertiesAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DoorPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;DoorPropertiesAbridged&quot;).</param>
            <param name="energy">energy.</param>
        </member>
        <member name="P:HoneybeeDotNet.DoorPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.DoorPropertiesAbridged.Energy">
            <summary>
            Gets or Sets Energy
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>DoorPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.Equals(HoneybeeDotNet.DoorPropertiesAbridged)">
            <summary>
            Returns true if DoorPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of DoorPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.DoorSetAbridged">
            <summary>
            A set of constructions for door assemblies.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DoorSetAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;DoorSetAbridged&quot;).</param>
            <param name="interiorConstruction">Name for an OpaqueConstruction for all opaque doors with a Surface boundary condition..</param>
            <param name="exteriorConstruction">Name for an OpaqueConstruction for opaque doors with an Outdoors boundary condition and a Wall face type for their parent face..</param>
            <param name="overheadConstruction">Name for an OpaqueConstruction for opaque doors with an Outdoors boundary condition and a RoofCeiling or Floor type for their parent face..</param>
            <param name="exteriorGlassConstruction">Name for an WindowConstruction for all glass doors with an Outdoors boundary condition..</param>
            <param name="interiorGlassConstruction">Name for an WindowConstruction for all glass doors with a Surface boundary condition..</param>
        </member>
        <member name="P:HoneybeeDotNet.DoorSetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.DoorSetAbridged.InteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for all opaque doors with a Surface boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for all opaque doors with a Surface boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.DoorSetAbridged.ExteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for opaque doors with an Outdoors boundary condition and a Wall face type for their parent face.
            </summary>
            <value>Name for an OpaqueConstruction for opaque doors with an Outdoors boundary condition and a Wall face type for their parent face.</value>
        </member>
        <member name="P:HoneybeeDotNet.DoorSetAbridged.OverheadConstruction">
            <summary>
            Name for an OpaqueConstruction for opaque doors with an Outdoors boundary condition and a RoofCeiling or Floor type for their parent face.
            </summary>
            <value>Name for an OpaqueConstruction for opaque doors with an Outdoors boundary condition and a RoofCeiling or Floor type for their parent face.</value>
        </member>
        <member name="P:HoneybeeDotNet.DoorSetAbridged.ExteriorGlassConstruction">
            <summary>
            Name for an WindowConstruction for all glass doors with an Outdoors boundary condition.
            </summary>
            <value>Name for an WindowConstruction for all glass doors with an Outdoors boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.DoorSetAbridged.InteriorGlassConstruction">
            <summary>
            Name for an WindowConstruction for all glass doors with a Surface boundary condition.
            </summary>
            <value>Name for an WindowConstruction for all glass doors with a Surface boundary condition.</value>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>DoorSetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.Equals(HoneybeeDotNet.DoorSetAbridged)">
            <summary>
            Returns true if DoorSetAbridged instances are equal
            </summary>
            <param name="input">Instance of DoorSetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.DoorSetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.DryBulbCondition">
            <summary>
            Used to specify dry bulb conditions on a design day.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DryBulbCondition" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.DryBulbCondition" /> class.
            </summary>
            <param name="dryBulbMax">The maximum dry bulb temperature on the design day [C]. (required).</param>
            <param name="dryBulbRange">The difference between min and max temperatures on thedesign day [C]. (required).</param>
            <param name="type">type (default to &quot;DryBulbCondition&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.DryBulbCondition.DryBulbMax">
            <summary>
            The maximum dry bulb temperature on the design day [C].
            </summary>
            <value>The maximum dry bulb temperature on the design day [C].</value>
        </member>
        <member name="P:HoneybeeDotNet.DryBulbCondition.DryBulbRange">
            <summary>
            The difference between min and max temperatures on thedesign day [C].
            </summary>
            <value>The difference between min and max temperatures on thedesign day [C].</value>
        </member>
        <member name="P:HoneybeeDotNet.DryBulbCondition.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>DryBulbCondition object</returns>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.Equals(HoneybeeDotNet.DryBulbCondition)">
            <summary>
            Returns true if DryBulbCondition instances are equal
            </summary>
            <param name="input">Instance of DryBulbCondition to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.DryBulbCondition.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ElectricEquipmentAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ElectricEquipmentAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.#ctor(System.String,System.Double,System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ElectricEquipmentAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="wattsPerArea">Equipment level per floor area as [W/m2]. (required).</param>
            <param name="schedule">Name of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile. (required).</param>
            <param name="radiantFraction">Number for the amount of long-wave radiation heat given off by electric equipment. Default value is 0. (default to 0).</param>
            <param name="latentFraction">Number for the amount of latent heat given off by electricequipment. Default value is 0. (default to 0).</param>
            <param name="lostFraction">Number for the amount of “lost” heat being given off by equipment. The default value is 0. (default to 0).</param>
            <param name="type">type (default to &quot;ElectricEquipmentAbridged&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.WattsPerArea">
            <summary>
            Equipment level per floor area as [W/m2].
            </summary>
            <value>Equipment level per floor area as [W/m2].</value>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.Schedule">
            <summary>
            Name of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile.
            </summary>
            <value>Name of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile.</value>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.RadiantFraction">
            <summary>
            Number for the amount of long-wave radiation heat given off by electric equipment. Default value is 0.
            </summary>
            <value>Number for the amount of long-wave radiation heat given off by electric equipment. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.LatentFraction">
            <summary>
            Number for the amount of latent heat given off by electricequipment. Default value is 0.
            </summary>
            <value>Number for the amount of latent heat given off by electricequipment. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.LostFraction">
            <summary>
            Number for the amount of “lost” heat being given off by equipment. The default value is 0.
            </summary>
            <value>Number for the amount of “lost” heat being given off by equipment. The default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.ElectricEquipmentAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ElectricEquipmentAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.Equals(HoneybeeDotNet.ElectricEquipmentAbridged)">
            <summary>
            Returns true if ElectricEquipmentAbridged instances are equal
            </summary>
            <param name="input">Instance of ElectricEquipmentAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ElectricEquipmentAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyMaterial">
            <summary>
            Opaque material representing a layer within an opaque construction.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.EnergyMaterial.RoughnessEnum">
            <summary>
            Defines Roughness
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterial.RoughnessEnum.VeryRough">
            <summary>
            Enum VeryRough for value: VeryRough
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterial.RoughnessEnum.Rough">
            <summary>
            Enum Rough for value: Rough
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterial.RoughnessEnum.MediumRough">
            <summary>
            Enum MediumRough for value: MediumRough
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterial.RoughnessEnum.MediumSmooth">
            <summary>
            Enum MediumSmooth for value: MediumSmooth
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterial.RoughnessEnum.Smooth">
            <summary>
            Enum Smooth for value: Smooth
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterial.RoughnessEnum.VerySmooth">
            <summary>
            Enum VerySmooth for value: VerySmooth
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.Roughness">
            <summary>
            Gets or Sets Roughness
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyMaterial" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.String,System.Nullable{HoneybeeDotNet.EnergyMaterial.RoughnessEnum},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyMaterial" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="thickness">Thickness of the material layer in meters. (required).</param>
            <param name="conductivity">Thermal conductivity of the material layer in W/(m-K). (required).</param>
            <param name="density">Density of the material layer in kg/m3. (required).</param>
            <param name="specificHeat">Specific heat of the material layer in J/(kg-K). (required).</param>
            <param name="type">type (default to &quot;EnergyMaterial&quot;).</param>
            <param name="roughness">roughness (default to RoughnessEnum.MediumRough).</param>
            <param name="thermalAbsorptance">Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9. (default to 0.9).</param>
            <param name="solarAbsorptance">Fraction of incident solar radiation absorbed by the material. Default value is 0.7. (default to 0.7).</param>
            <param name="visibleAbsorptance">Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7. (default to 0.7).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.Thickness">
            <summary>
            Thickness of the material layer in meters.
            </summary>
            <value>Thickness of the material layer in meters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.Conductivity">
            <summary>
            Thermal conductivity of the material layer in W/(m-K).
            </summary>
            <value>Thermal conductivity of the material layer in W/(m-K).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.Density">
            <summary>
            Density of the material layer in kg/m3.
            </summary>
            <value>Density of the material layer in kg/m3.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.SpecificHeat">
            <summary>
            Specific heat of the material layer in J/(kg-K).
            </summary>
            <value>Specific heat of the material layer in J/(kg-K).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.ThermalAbsorptance">
            <summary>
            Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9.
            </summary>
            <value>Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.SolarAbsorptance">
            <summary>
            Fraction of incident solar radiation absorbed by the material. Default value is 0.7.
            </summary>
            <value>Fraction of incident solar radiation absorbed by the material. Default value is 0.7.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterial.VisibleAbsorptance">
            <summary>
            Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7.
            </summary>
            <value>Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyMaterial object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.Equals(HoneybeeDotNet.EnergyMaterial)">
            <summary>
            Returns true if EnergyMaterial instances are equal
            </summary>
            <param name="input">Instance of EnergyMaterial to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterial.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyMaterialNoMass">
            <summary>
            No mass opaque material representing a layer within an opaque construction.  Used when only the thermal resistance (R value) of the material is known.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum">
            <summary>
            Defines Roughness
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum.VeryRough">
            <summary>
            Enum VeryRough for value: VeryRough
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum.Rough">
            <summary>
            Enum Rough for value: Rough
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum.MediumRough">
            <summary>
            Enum MediumRough for value: MediumRough
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum.MediumSmooth">
            <summary>
            Enum MediumSmooth for value: MediumSmooth
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum.Smooth">
            <summary>
            Enum Smooth for value: Smooth
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum.VerySmooth">
            <summary>
            Enum VerySmooth for value: VerySmooth
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.Roughness">
            <summary>
            Gets or Sets Roughness
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyMaterialNoMass" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.#ctor(System.String,System.Double,System.String,System.Nullable{HoneybeeDotNet.EnergyMaterialNoMass.RoughnessEnum},System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyMaterialNoMass" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="rValue">The thermal resistance (R-value) of the material layer [m2-K/W]. (required).</param>
            <param name="type">type (default to &quot;EnergyMaterialNoMass&quot;).</param>
            <param name="roughness">roughness (default to RoughnessEnum.MediumRough).</param>
            <param name="thermalAbsorptance">Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9. (default to 0.9).</param>
            <param name="solarAbsorptance">Fraction of incident solar radiation absorbed by the material. Default value is 0.7. (default to 0.7).</param>
            <param name="visibleAbsorptance">Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7. (default to 0.7).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.RValue">
            <summary>
            The thermal resistance (R-value) of the material layer [m2-K/W].
            </summary>
            <value>The thermal resistance (R-value) of the material layer [m2-K/W].</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.ThermalAbsorptance">
            <summary>
            Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9.
            </summary>
            <value>Fraction of incident long wavelength radiation that is absorbed by the material. Default value is 0.9.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.SolarAbsorptance">
            <summary>
            Fraction of incident solar radiation absorbed by the material. Default value is 0.7.
            </summary>
            <value>Fraction of incident solar radiation absorbed by the material. Default value is 0.7.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyMaterialNoMass.VisibleAbsorptance">
            <summary>
            Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7.
            </summary>
            <value>Fraction of incident visible wavelength radiation absorbed by the material. Default value is 0.7.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyMaterialNoMass object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.Equals(HoneybeeDotNet.EnergyMaterialNoMass)">
            <summary>
            Returns true if EnergyMaterialNoMass instances are equal
            </summary>
            <param name="input">Instance of EnergyMaterialNoMass to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyMaterialNoMass.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialBlind">
            <summary>
            Window blind properties.  Window blind properties consist of flat, equally-spaced slats.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatOrientationEnum">
            <summary>
            Defines SlatOrientation
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatOrientationEnum.Horizontal">
            <summary>
            Enum Horizontal for value: Horizontal
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatOrientationEnum.Vertical">
            <summary>
            Enum Vertical for value: Vertical
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatOrientationEnum.ChoicesincludeHorizontalandVerticalHorizontalmeanstheslatsareparalleltotheXAxisofthewindowVerticalmeanstheslatsareparalleltotheYAxisofthewindow">
            <summary>
            Enum ChoicesincludeHorizontalandVerticalHorizontalmeanstheslatsareparalleltotheXAxisofthewindowVerticalmeanstheslatsareparalleltotheYAxisofthewindow for value: Choices include Horizontal and Vertical. Horizontal means the slats are parallel to the X-axis of the window. Vertical means the slats are parallel to the Y-axis of the window.
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatOrientation">
            <summary>
            Gets or Sets SlatOrientation
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialBlind" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.#ctor(System.String,System.String,System.Nullable{HoneybeeDotNet.EnergyWindowMaterialBlind.SlatOrientationEnum},System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialBlind" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialBlind&quot;).</param>
            <param name="slatOrientation">slatOrientation (default to SlatOrientationEnum.Horizontal).</param>
            <param name="slatWidth">The width of slat measured from edge to edge in meters. (default to 0.025).</param>
            <param name="slatSeparation">The distance between the front of a slat and the back of the adjacent slat in meters. (default to 0.01875).</param>
            <param name="slatThickness">The distance between the faces of a slat in meters. The default value is 0.001. (default to 0.001).</param>
            <param name="slatAngle">The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45. (default to 45).</param>
            <param name="slatConductivity">The thermal conductivity of the slat in W/(m-K). Default value is 221. (default to 221).</param>
            <param name="beamSolarTransmittance">The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0. (default to 0).</param>
            <param name="beamSolarReflectance">The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5).</param>
            <param name="beamSolarReflectanceBack">The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5).</param>
            <param name="diffuseSolarTransmittance">The slat transmittance for hemisperically diffuse solar radiation. Default value is 0. (default to 0).</param>
            <param name="diffuseSolarReflectance">The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5. (default to 0.5).</param>
            <param name="diffuseSolarReflectanceBack">The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5. (default to 0.5).</param>
            <param name="beamVisibleTransmittance">The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0. (default to 0).</param>
            <param name="beamVisibleReflectance">The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5).</param>
            <param name="beamVisibleReflectanceBack">The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5).</param>
            <param name="diffuseVisibleTransmittance">The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.” (default to 0).</param>
            <param name="diffuseVisibleReflectance">The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5. (default to 0.5).</param>
            <param name="diffuseVisibleReflectanceBack">The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.” (default to 0.5).</param>
            <param name="infraredTransmittance">The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0. (default to 0).</param>
            <param name="emissivity">Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9. (default to 0.9).</param>
            <param name="emissivityBack">Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9. (default to 0.9).</param>
            <param name="distanceToGlass">The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05. (default to 0.05).</param>
            <param name="topOpeningMultiplier">The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5 (default to 0.5).</param>
            <param name="bottomOpeningMultiplier">The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0. (default to 0.5).</param>
            <param name="leftOpeningMultiplier">The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5. (default to 0.5).</param>
            <param name="rightOpeningMultiplier">The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5. (default to 0.5).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatWidth">
            <summary>
            The width of slat measured from edge to edge in meters.
            </summary>
            <value>The width of slat measured from edge to edge in meters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatSeparation">
            <summary>
            The distance between the front of a slat and the back of the adjacent slat in meters.
            </summary>
            <value>The distance between the front of a slat and the back of the adjacent slat in meters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatThickness">
            <summary>
            The distance between the faces of a slat in meters. The default value is 0.001.
            </summary>
            <value>The distance between the faces of a slat in meters. The default value is 0.001.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatAngle">
            <summary>
            The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.
            </summary>
            <value>The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.SlatConductivity">
            <summary>
            The thermal conductivity of the slat in W/(m-K). Default value is 221.
            </summary>
            <value>The thermal conductivity of the slat in W/(m-K). Default value is 221.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BeamSolarTransmittance">
            <summary>
            The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.
            </summary>
            <value>The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BeamSolarReflectance">
            <summary>
            The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
            </summary>
            <value>The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BeamSolarReflectanceBack">
            <summary>
            The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
            </summary>
            <value>The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DiffuseSolarTransmittance">
            <summary>
            The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.
            </summary>
            <value>The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DiffuseSolarReflectance">
            <summary>
            The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
            </summary>
            <value>The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DiffuseSolarReflectanceBack">
            <summary>
            The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
            </summary>
            <value>The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BeamVisibleTransmittance">
            <summary>
            The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.
            </summary>
            <value>The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BeamVisibleReflectance">
            <summary>
            The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
            </summary>
            <value>The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BeamVisibleReflectanceBack">
            <summary>
            The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
            </summary>
            <value>The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DiffuseVisibleTransmittance">
            <summary>
            The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”
            </summary>
            <value>The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DiffuseVisibleReflectance">
            <summary>
            The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.
            </summary>
            <value>The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DiffuseVisibleReflectanceBack">
            <summary>
            The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”
            </summary>
            <value>The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.InfraredTransmittance">
            <summary>
            The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.
            </summary>
            <value>The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.Emissivity">
            <summary>
            Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
            </summary>
            <value>Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.EmissivityBack">
            <summary>
            Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
            </summary>
            <value>Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.DistanceToGlass">
            <summary>
            The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.
            </summary>
            <value>The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.TopOpeningMultiplier">
            <summary>
            The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5
            </summary>
            <value>The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.BottomOpeningMultiplier">
            <summary>
            The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.
            </summary>
            <value>The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.LeftOpeningMultiplier">
            <summary>
            The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
            </summary>
            <value>The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialBlind.RightOpeningMultiplier">
            <summary>
            The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
            </summary>
            <value>The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialBlind object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.Equals(HoneybeeDotNet.EnergyWindowMaterialBlind)">
            <summary>
            Returns true if EnergyWindowMaterialBlind instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialBlind to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialBlind.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialGas">
            <summary>
            Create single layer of gas in a window construction.  Can be combined with EnergyWindowMaterialGlazing to make multi-pane windows.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialGas.GasTypeEnum">
            <summary>
            Defines GasType
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGas.GasTypeEnum.Air">
            <summary>
            Enum Air for value: Air
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGas.GasTypeEnum.Argon">
            <summary>
            Enum Argon for value: Argon
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGas.GasTypeEnum.Krypton">
            <summary>
            Enum Krypton for value: Krypton
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGas.GasTypeEnum.Xenon">
            <summary>
            Enum Xenon for value: Xenon
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGas.GasType">
            <summary>
            Gets or Sets GasType
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGas" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.#ctor(System.String,System.String,System.Double,System.Nullable{HoneybeeDotNet.EnergyWindowMaterialGas.GasTypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGas" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialGas&quot;).</param>
            <param name="thickness">Thickness of the gas layer in meters. Default value is 0.0125. (default to 0.0125).</param>
            <param name="gasType">gasType (default to GasTypeEnum.Air).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGas.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGas.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGas.Thickness">
            <summary>
            Thickness of the gas layer in meters. Default value is 0.0125.
            </summary>
            <value>Thickness of the gas layer in meters. Default value is 0.0125.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialGas object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.Equals(HoneybeeDotNet.EnergyWindowMaterialGas)">
            <summary>
            Returns true if EnergyWindowMaterialGas instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialGas to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGas.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialGasCustom">
            <summary>
            Create single layer of custom gas.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGasCustom" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGasCustom" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="conductivityCoeffA">The A coefficient for gas conductivity in W/(m-K). (required).</param>
            <param name="viscosityCoeffA">The A coefficient for gas viscosity in kg/(m-s). (required).</param>
            <param name="specificHeatCoeffA">The A coefficient for gas specific heat in J/(kg-K). (required).</param>
            <param name="specificHeatRatio">The specific heat ratio for gas. (required).</param>
            <param name="molecularWeight">The molecular weight for gas in g/mol. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialGasCustom&quot;).</param>
            <param name="thickness">Thickness of the gas layer in meters. Default value is 0.0125. (default to 0.0125).</param>
            <param name="conductivityCoeffB">The B coefficient for gas conductivity in W/(m-K2). (default to 0).</param>
            <param name="conductivityCoeffC">The C coefficient for gas conductivity in W/(m-K3). (default to 0).</param>
            <param name="viscosityCoeffB">The B coefficient for gas viscosity in kg/(m-s-K). (default to 0).</param>
            <param name="viscosityCoeffC">The C coefficient for gas viscosity in kg/(m-s-K2). (default to 0).</param>
            <param name="specificHeatCoeffB">The B coefficient for gas specific heat in J/(kg-K2). (default to 0).</param>
            <param name="specificHeatCoeffC">The C coefficient for gas specific heat in J/(kg-K3). (default to 0).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ConductivityCoeffA">
            <summary>
            The A coefficient for gas conductivity in W/(m-K).
            </summary>
            <value>The A coefficient for gas conductivity in W/(m-K).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ViscosityCoeffA">
            <summary>
            The A coefficient for gas viscosity in kg/(m-s).
            </summary>
            <value>The A coefficient for gas viscosity in kg/(m-s).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.SpecificHeatCoeffA">
            <summary>
            The A coefficient for gas specific heat in J/(kg-K).
            </summary>
            <value>The A coefficient for gas specific heat in J/(kg-K).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.SpecificHeatRatio">
            <summary>
            The specific heat ratio for gas.
            </summary>
            <value>The specific heat ratio for gas.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.MolecularWeight">
            <summary>
            The molecular weight for gas in g/mol.
            </summary>
            <value>The molecular weight for gas in g/mol.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.Thickness">
            <summary>
            Thickness of the gas layer in meters. Default value is 0.0125.
            </summary>
            <value>Thickness of the gas layer in meters. Default value is 0.0125.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ConductivityCoeffB">
            <summary>
            The B coefficient for gas conductivity in W/(m-K2).
            </summary>
            <value>The B coefficient for gas conductivity in W/(m-K2).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ConductivityCoeffC">
            <summary>
            The C coefficient for gas conductivity in W/(m-K3).
            </summary>
            <value>The C coefficient for gas conductivity in W/(m-K3).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ViscosityCoeffB">
            <summary>
            The B coefficient for gas viscosity in kg/(m-s-K).
            </summary>
            <value>The B coefficient for gas viscosity in kg/(m-s-K).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ViscosityCoeffC">
            <summary>
            The C coefficient for gas viscosity in kg/(m-s-K2).
            </summary>
            <value>The C coefficient for gas viscosity in kg/(m-s-K2).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.SpecificHeatCoeffB">
            <summary>
            The B coefficient for gas specific heat in J/(kg-K2).
            </summary>
            <value>The B coefficient for gas specific heat in J/(kg-K2).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasCustom.SpecificHeatCoeffC">
            <summary>
            The C coefficient for gas specific heat in J/(kg-K3).
            </summary>
            <value>The C coefficient for gas specific heat in J/(kg-K3).</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialGasCustom object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.Equals(HoneybeeDotNet.EnergyWindowMaterialGasCustom)">
            <summary>
            Returns true if EnergyWindowMaterialGasCustom instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialGasCustom to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasCustom.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialGasMixture">
            <summary>
            Create a mixture of two to four different gases to fill the panes of multiple pane windows.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypesEnum">
            <summary>
            Defines GasTypes
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypesEnum.Air">
            <summary>
            Enum Air for value: Air
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypesEnum.Argon">
            <summary>
            Enum Argon for value: Argon
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypesEnum.Krypton">
            <summary>
            Enum Krypton for value: Krypton
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypesEnum.Xenon">
            <summary>
            Enum Xenon for value: Xenon
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypes">
            <summary>
            List of gases in the gas mixture.
            </summary>
            <value>List of gases in the gas mixture.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGasMixture" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.#ctor(System.String,System.Collections.Generic.List{HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasTypesEnum},System.Collections.Generic.List{System.Double},System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGasMixture" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="gasTypes">List of gases in the gas mixture. (required).</param>
            <param name="gasFractions">A list of fractional numbers describing the volumetric fractions of gas types in the mixture. This list must align with the gas_types list and must sum to 1. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialGasMixture&quot;).</param>
            <param name="thickness">The thickness of the gas mixture layer in meters. (default to 0.0125).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasMixture.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GasFractions">
            <summary>
            A list of fractional numbers describing the volumetric fractions of gas types in the mixture. This list must align with the gas_types list and must sum to 1.
            </summary>
            <value>A list of fractional numbers describing the volumetric fractions of gas types in the mixture. This list must align with the gas_types list and must sum to 1.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasMixture.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGasMixture.Thickness">
            <summary>
            The thickness of the gas mixture layer in meters.
            </summary>
            <value>The thickness of the gas mixture layer in meters.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialGasMixture object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.Equals(HoneybeeDotNet.EnergyWindowMaterialGasMixture)">
            <summary>
            Returns true if EnergyWindowMaterialGasMixture instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialGasMixture to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGasMixture.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialGlazing">
            <summary>
            Describe a single glass pane corresponding to a layer in a window construction.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGlazing" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialGlazing" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialGlazing&quot;).</param>
            <param name="thickness">The surface-to-surface of the glass in meters. Default value is 0.003. (default to 0.003).</param>
            <param name="solarTransmittance">Transmittance of solar radiation through the glass at normal incidence. Default value is 0.85 for clear glass. (default to 0.85).</param>
            <param name="solarReflectance">Reflectance of solar radiation off of the front side of the glass at normal incidence, averaged over the solar spectrum. Default value is 0.075 for clear glass. (default to 0.075).</param>
            <param name="solarReflectanceBack">Reflectance of solar radiation off of the back side of the glass at normal incidence, averaged over the solar spectrum..</param>
            <param name="visibleTransmittance">Transmittance of visible light through the glass at normal incidence. Default value is 0.9 for clear glass. (default to 0.9).</param>
            <param name="visibleReflectance">Reflectance of visible light off of the front side of the glass at normal incidence. Default value is 0.075 for clear glass. (default to 0.075).</param>
            <param name="visibleReflectanceBack">Reflectance of visible light off of the back side of the glass at normal incidence averaged over the solar spectrum and weighted by the response of the human eye..</param>
            <param name="infraredTransmittance">Long-wave transmittance at normal incidence. (default to 0).</param>
            <param name="emissivity">Infrared hemispherical emissivity of the front (outward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating. (default to 0.84).</param>
            <param name="emissivityBack">Infrared hemispherical emissivity of the back (inward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating. (default to 0.84).</param>
            <param name="conductivity">Thermal conductivity of the glass in W/(m-K). Default value is 0.9, which is  typical for clear glass without a low-e coating. (default to 0.9).</param>
            <param name="dirtCorrection">Factor that corrects for the presence of dirt on the glass. A default value of 1 indicates the glass is clean. (default to 1).</param>
            <param name="solarDiffusing">Takes values True and False. If False (default), the beam solar radiation incident on the glass is transmitted as beam radiation with no diffuse component.If True, the beam  solar radiation incident on the glass is transmitted as hemispherical diffuse radiation with no beam component. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.Thickness">
            <summary>
            The surface-to-surface of the glass in meters. Default value is 0.003.
            </summary>
            <value>The surface-to-surface of the glass in meters. Default value is 0.003.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.SolarTransmittance">
            <summary>
            Transmittance of solar radiation through the glass at normal incidence. Default value is 0.85 for clear glass.
            </summary>
            <value>Transmittance of solar radiation through the glass at normal incidence. Default value is 0.85 for clear glass.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.SolarReflectance">
            <summary>
            Reflectance of solar radiation off of the front side of the glass at normal incidence, averaged over the solar spectrum. Default value is 0.075 for clear glass.
            </summary>
            <value>Reflectance of solar radiation off of the front side of the glass at normal incidence, averaged over the solar spectrum. Default value is 0.075 for clear glass.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.SolarReflectanceBack">
            <summary>
            Reflectance of solar radiation off of the back side of the glass at normal incidence, averaged over the solar spectrum.
            </summary>
            <value>Reflectance of solar radiation off of the back side of the glass at normal incidence, averaged over the solar spectrum.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.VisibleTransmittance">
            <summary>
            Transmittance of visible light through the glass at normal incidence. Default value is 0.9 for clear glass.
            </summary>
            <value>Transmittance of visible light through the glass at normal incidence. Default value is 0.9 for clear glass.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.VisibleReflectance">
            <summary>
            Reflectance of visible light off of the front side of the glass at normal incidence. Default value is 0.075 for clear glass.
            </summary>
            <value>Reflectance of visible light off of the front side of the glass at normal incidence. Default value is 0.075 for clear glass.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.VisibleReflectanceBack">
            <summary>
            Reflectance of visible light off of the back side of the glass at normal incidence averaged over the solar spectrum and weighted by the response of the human eye.
            </summary>
            <value>Reflectance of visible light off of the back side of the glass at normal incidence averaged over the solar spectrum and weighted by the response of the human eye.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.InfraredTransmittance">
            <summary>
            Long-wave transmittance at normal incidence.
            </summary>
            <value>Long-wave transmittance at normal incidence.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.Emissivity">
            <summary>
            Infrared hemispherical emissivity of the front (outward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating.
            </summary>
            <value>Infrared hemispherical emissivity of the front (outward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.EmissivityBack">
            <summary>
            Infrared hemispherical emissivity of the back (inward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating.
            </summary>
            <value>Infrared hemispherical emissivity of the back (inward facing) side of the glass.  Default value is 0.84, which is typical for clear glass without a low-e coating.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.Conductivity">
            <summary>
            Thermal conductivity of the glass in W/(m-K). Default value is 0.9, which is  typical for clear glass without a low-e coating.
            </summary>
            <value>Thermal conductivity of the glass in W/(m-K). Default value is 0.9, which is  typical for clear glass without a low-e coating.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.DirtCorrection">
            <summary>
            Factor that corrects for the presence of dirt on the glass. A default value of 1 indicates the glass is clean.
            </summary>
            <value>Factor that corrects for the presence of dirt on the glass. A default value of 1 indicates the glass is clean.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialGlazing.SolarDiffusing">
            <summary>
            Takes values True and False. If False (default), the beam solar radiation incident on the glass is transmitted as beam radiation with no diffuse component.If True, the beam  solar radiation incident on the glass is transmitted as hemispherical diffuse radiation with no beam component.
            </summary>
            <value>Takes values True and False. If False (default), the beam solar radiation incident on the glass is transmitted as beam radiation with no diffuse component.If True, the beam  solar radiation incident on the glass is transmitted as hemispherical diffuse radiation with no beam component.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialGlazing object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.Equals(HoneybeeDotNet.EnergyWindowMaterialGlazing)">
            <summary>
            Returns true if EnergyWindowMaterialGlazing instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialGlazing to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialGlazing.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialShade">
            <summary>
            This object specifies the properties of window shade materials.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialShade" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialShade" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialShade&quot;).</param>
            <param name="solarTransmittance">The transmittance averaged over the solar spectrum. It is assumed independent of incidence angle. Default value is 0.4. (default to 0.4).</param>
            <param name="solarReflectance">The reflectance averaged over the solar spectrum. It us assumed same on both sides of shade and independent of incidence angle. Default value is 0.5 (default to 0.5).</param>
            <param name="visibleTransmittance">The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4. (default to 0.4).</param>
            <param name="visibleReflectance">The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4 (default to 0.4).</param>
            <param name="emissivity">The effective long-wave infrared hemispherical emissivity. It is assumed same on both sides of shade. Default value is 0.9. (default to 0.9).</param>
            <param name="infraredTransmittance">The effective long-wave transmittance. It is assumed independent of incidence angle. Default value is 0. (default to 0).</param>
            <param name="thickness">The thickness of the shade material in meters. Default value is 0.005. (default to 0.005).</param>
            <param name="conductivity">The conductivity of the shade material in W/(m-K). Default value is 0.1. (default to 0.1).</param>
            <param name="distanceToGlass">The distance from shade to adjacent glass in meters. Default value is 0.05 (default to 0.05).</param>
            <param name="topOpeningMultiplier">The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. Default value is 0.5. (default to 0.5).</param>
            <param name="bottomOpeningMultiplier">The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. Default value is 0.5. (default to 0.5).</param>
            <param name="leftOpeningMultiplier">The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. Default value is 0.5. (default to 0.5).</param>
            <param name="rightOpeningMultiplier">The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. Default value is 0.5. (default to 0.5).</param>
            <param name="airflowPermeability">The fraction of the shade surface that is open to air flow. If air cannot pass through the shade material, airflow_permeability &#x3D; 0. Default value is 0. (default to 0).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.SolarTransmittance">
            <summary>
            The transmittance averaged over the solar spectrum. It is assumed independent of incidence angle. Default value is 0.4.
            </summary>
            <value>The transmittance averaged over the solar spectrum. It is assumed independent of incidence angle. Default value is 0.4.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.SolarReflectance">
            <summary>
            The reflectance averaged over the solar spectrum. It us assumed same on both sides of shade and independent of incidence angle. Default value is 0.5
            </summary>
            <value>The reflectance averaged over the solar spectrum. It us assumed same on both sides of shade and independent of incidence angle. Default value is 0.5</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.VisibleTransmittance">
            <summary>
            The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4.
            </summary>
            <value>The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.VisibleReflectance">
            <summary>
            The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4
            </summary>
            <value>The transmittance averaged over the solar spectrum and weighted by the response of the human eye. It is assumed independent of incidence angle. Default value is 0.4</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.Emissivity">
            <summary>
            The effective long-wave infrared hemispherical emissivity. It is assumed same on both sides of shade. Default value is 0.9.
            </summary>
            <value>The effective long-wave infrared hemispherical emissivity. It is assumed same on both sides of shade. Default value is 0.9.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.InfraredTransmittance">
            <summary>
            The effective long-wave transmittance. It is assumed independent of incidence angle. Default value is 0.
            </summary>
            <value>The effective long-wave transmittance. It is assumed independent of incidence angle. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.Thickness">
            <summary>
            The thickness of the shade material in meters. Default value is 0.005.
            </summary>
            <value>The thickness of the shade material in meters. Default value is 0.005.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.Conductivity">
            <summary>
            The conductivity of the shade material in W/(m-K). Default value is 0.1.
            </summary>
            <value>The conductivity of the shade material in W/(m-K). Default value is 0.1.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.DistanceToGlass">
            <summary>
            The distance from shade to adjacent glass in meters. Default value is 0.05
            </summary>
            <value>The distance from shade to adjacent glass in meters. Default value is 0.05</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.TopOpeningMultiplier">
            <summary>
            The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. Default value is 0.5.
            </summary>
            <value>The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.BottomOpeningMultiplier">
            <summary>
            The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. Default value is 0.5.
            </summary>
            <value>The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.LeftOpeningMultiplier">
            <summary>
            The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. Default value is 0.5.
            </summary>
            <value>The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.RightOpeningMultiplier">
            <summary>
            The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. Default value is 0.5.
            </summary>
            <value>The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. Default value is 0.5.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialShade.AirflowPermeability">
            <summary>
            The fraction of the shade surface that is open to air flow. If air cannot pass through the shade material, airflow_permeability &#x3D; 0. Default value is 0.
            </summary>
            <value>The fraction of the shade surface that is open to air flow. If air cannot pass through the shade material, airflow_permeability &#x3D; 0. Default value is 0.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialShade object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.Equals(HoneybeeDotNet.EnergyWindowMaterialShade)">
            <summary>
            Returns true if EnergyWindowMaterialShade instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialShade to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialShade.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys">
            <summary>
            Describe an entire glazing system rather than individual layers.  Used when only very limited information is available on the glazing layers or when specific performance levels are being targeted.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.#ctor(System.String,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="uFactor">Used to describe the value for window system U-Factor, or overall heat transfer coefficient in W/(m2-K). (required).</param>
            <param name="shgc">Unitless  quantity describing Solar Heat Gain Coefficient for normal incidence and vertical orientation. (required).</param>
            <param name="type">type (default to &quot;EnergyWindowMaterialSimpleGlazSys&quot;).</param>
            <param name="vt">The fraction of visible light falling on the window that makes it through the glass at normal incidence. (default to 0.54).</param>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.UFactor">
            <summary>
            Used to describe the value for window system U-Factor, or overall heat transfer coefficient in W/(m2-K).
            </summary>
            <value>Used to describe the value for window system U-Factor, or overall heat transfer coefficient in W/(m2-K).</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.Shgc">
            <summary>
            Unitless  quantity describing Solar Heat Gain Coefficient for normal incidence and vertical orientation.
            </summary>
            <value>Unitless  quantity describing Solar Heat Gain Coefficient for normal incidence and vertical orientation.</value>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.Vt">
            <summary>
            The fraction of visible light falling on the window that makes it through the glass at normal incidence.
            </summary>
            <value>The fraction of visible light falling on the window that makes it through the glass at normal incidence.</value>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>EnergyWindowMaterialSimpleGlazSys object</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.Equals(HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys)">
            <summary>
            Returns true if EnergyWindowMaterialSimpleGlazSys instances are equal
            </summary>
            <param name="input">Instance of EnergyWindowMaterialSimpleGlazSys to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Face">
            <summary>
            Base class for all objects requiring a valid names for all engines.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.Face.FaceTypeEnum">
            <summary>
            Defines FaceType
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Face.FaceTypeEnum.Wall">
            <summary>
            Enum Wall for value: Wall
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Face.FaceTypeEnum.Floor">
            <summary>
            Enum Floor for value: Floor
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Face.FaceTypeEnum.RoofCeiling">
            <summary>
            Enum RoofCeiling for value: RoofCeiling
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Face.FaceTypeEnum.AirWall">
            <summary>
            Enum AirWall for value: AirWall
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Face.FaceType">
            <summary>
            Gets or Sets FaceType
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Face.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Face" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Face.#ctor(System.String,HoneybeeDotNet.Face3D,HoneybeeDotNet.Face.FaceTypeEnum,HoneybeeDotNet.AnyOf{HoneybeeDotNet.Ground,HoneybeeDotNet.Outdoors,HoneybeeDotNet.Adiabatic,HoneybeeDotNet.Surface},HoneybeeDotNet.FacePropertiesAbridged,System.String,System.String,System.Collections.Generic.List{HoneybeeDotNet.Aperture},System.Collections.Generic.List{HoneybeeDotNet.Door},System.Collections.Generic.List{HoneybeeDotNet.Shade},System.Collections.Generic.List{HoneybeeDotNet.Shade})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Face" /> class.
            </summary>
            <param name="name">Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters. (required).</param>
            <param name="geometry">Planar Face3D for the geometry. (required).</param>
            <param name="faceType">faceType (required).</param>
            <param name="boundaryCondition">boundaryCondition (required).</param>
            <param name="properties">Extension properties for particular simulation engines (Radiance, EnergyPlus). (required).</param>
            <param name="displayName">Display name of the object with no restrictions..</param>
            <param name="type">type (default to &quot;Face&quot;).</param>
            <param name="apertures">Apertures assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid..</param>
            <param name="doors">Doors assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid..</param>
            <param name="indoorShades">Shades assigned to the interior side of this object..</param>
            <param name="outdoorShades">Shades assigned to the exterior side of this object (eg. balcony, overhang)..</param>
        </member>
        <member name="P:HoneybeeDotNet.Face.Name">
            <summary>
            Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.Geometry">
            <summary>
            Planar Face3D for the geometry.
            </summary>
            <value>Planar Face3D for the geometry.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.BoundaryCondition">
            <summary>
            Gets or Sets BoundaryCondition
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Face.Properties">
            <summary>
            Extension properties for particular simulation engines (Radiance, EnergyPlus).
            </summary>
            <value>Extension properties for particular simulation engines (Radiance, EnergyPlus).</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.DisplayName">
            <summary>
            Display name of the object with no restrictions.
            </summary>
            <value>Display name of the object with no restrictions.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Face.Apertures">
            <summary>
            Apertures assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid.
            </summary>
            <value>Apertures assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.Doors">
            <summary>
            Doors assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid.
            </summary>
            <value>Doors assigned to this Face. Should be coplanar with this Face and completely within the boundary of the Face to be valid.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.IndoorShades">
            <summary>
            Shades assigned to the interior side of this object.
            </summary>
            <value>Shades assigned to the interior side of this object.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face.OutdoorShades">
            <summary>
            Shades assigned to the exterior side of this object (eg. balcony, overhang).
            </summary>
            <value>Shades assigned to the exterior side of this object (eg. balcony, overhang).</value>
        </member>
        <member name="M:HoneybeeDotNet.Face.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Face object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face.Equals(HoneybeeDotNet.Face)">
            <summary>
            Returns true if Face instances are equal
            </summary>
            <param name="input">Instance of Face to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Face3D">
            <summary>
            A single planar face in 3D space.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Face3D" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Double}},System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Collections.Generic.List{System.Double}}},HoneybeeDotNet.Plane)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Face3D" /> class.
            </summary>
            <param name="boundary">A list of points representing the outer boundary vertices of the face. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values. (required).</param>
            <param name="type">type (default to &quot;Face3D&quot;).</param>
            <param name="holes">Optional list of lists with one list for each hole in the face.Each hole should be a list of at least 3 points and each point a list of 3 (x, y, z) values. If None, it will be assumed that there are no holes in the face..</param>
            <param name="plane">Optional Plane indicating the plane in which the face exists.If None, the plane will usually be derived from the boundary points..</param>
        </member>
        <member name="P:HoneybeeDotNet.Face3D.Boundary">
            <summary>
            A list of points representing the outer boundary vertices of the face. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.
            </summary>
            <value>A list of points representing the outer boundary vertices of the face. The list should include at least 3 points and each point should be a list of 3 (x, y, z) values.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face3D.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Face3D.Holes">
            <summary>
            Optional list of lists with one list for each hole in the face.Each hole should be a list of at least 3 points and each point a list of 3 (x, y, z) values. If None, it will be assumed that there are no holes in the face.
            </summary>
            <value>Optional list of lists with one list for each hole in the face.Each hole should be a list of at least 3 points and each point a list of 3 (x, y, z) values. If None, it will be assumed that there are no holes in the face.</value>
        </member>
        <member name="P:HoneybeeDotNet.Face3D.Plane">
            <summary>
            Optional Plane indicating the plane in which the face exists.If None, the plane will usually be derived from the boundary points.
            </summary>
            <value>Optional Plane indicating the plane in which the face exists.If None, the plane will usually be derived from the boundary points.</value>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Face3D object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.Equals(HoneybeeDotNet.Face3D)">
            <summary>
            Returns true if Face3D instances are equal
            </summary>
            <param name="input">Instance of Face3D to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Face3D.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.FaceEnergyPropertiesAbridged">
            <summary>
            FaceEnergyPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.FaceEnergyPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;FaceEnergyPropertiesAbridged&quot;).</param>
            <param name="construction">Name of an OpaqueConstruction for the Face. If None, the construction is set by the parent Room construction_set or the Model global_construction_set..</param>
        </member>
        <member name="P:HoneybeeDotNet.FaceEnergyPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.FaceEnergyPropertiesAbridged.Construction">
            <summary>
            Name of an OpaqueConstruction for the Face. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.
            </summary>
            <value>Name of an OpaqueConstruction for the Face. If None, the construction is set by the parent Room construction_set or the Model global_construction_set.</value>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>FaceEnergyPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.Equals(HoneybeeDotNet.FaceEnergyPropertiesAbridged)">
            <summary>
            Returns true if FaceEnergyPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of FaceEnergyPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.FaceEnergyPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.FacePropertiesAbridged">
            <summary>
            FacePropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.#ctor(System.String,HoneybeeDotNet.FaceEnergyPropertiesAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.FacePropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;FacePropertiesAbridged&quot;).</param>
            <param name="energy">energy.</param>
        </member>
        <member name="P:HoneybeeDotNet.FacePropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.FacePropertiesAbridged.Energy">
            <summary>
            Gets or Sets Energy
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>FacePropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.Equals(HoneybeeDotNet.FacePropertiesAbridged)">
            <summary>
            Returns true if FacePropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of FacePropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.FacePropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.FloorSetAbridged">
            <summary>
            A set of constructions for floor assemblies.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.FloorSetAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;FloorSetAbridged&quot;).</param>
            <param name="interiorConstruction">Name for an OpaqueConstruction for floors with a Surface or Adiabatic boundary condition..</param>
            <param name="exteriorConstruction">Name for an OpaqueConstruction for floors with an Outdoors boundary condition..</param>
            <param name="groundConstruction">Name for an OpaqueConstruction for floors with a Ground boundary condition..</param>
        </member>
        <member name="P:HoneybeeDotNet.FloorSetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.FloorSetAbridged.InteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for floors with a Surface or Adiabatic boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for floors with a Surface or Adiabatic boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.FloorSetAbridged.ExteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for floors with an Outdoors boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for floors with an Outdoors boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.FloorSetAbridged.GroundConstruction">
            <summary>
            Name for an OpaqueConstruction for floors with a Ground boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for floors with a Ground boundary condition.</value>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>FloorSetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.Equals(HoneybeeDotNet.FloorSetAbridged)">
            <summary>
            Returns true if FloorSetAbridged instances are equal
            </summary>
            <param name="input">Instance of FloorSetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.FloorSetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.GasEquipmentAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.GasEquipmentAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.#ctor(System.String,System.Double,System.String,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.GasEquipmentAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="wattsPerArea">Equipment level per floor area as [W/m2]. (required).</param>
            <param name="schedule">Name of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile. (required).</param>
            <param name="radiantFraction">Number for the amount of long-wave radiation heat given off by electric equipment. Default value is 0. (default to 0).</param>
            <param name="latentFraction">Number for the amount of latent heat given off by electricequipment. Default value is 0. (default to 0).</param>
            <param name="lostFraction">Number for the amount of “lost” heat being given off by equipment. The default value is 0. (default to 0).</param>
            <param name="type">type (default to &quot;GasEquipmentAbridged&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.WattsPerArea">
            <summary>
            Equipment level per floor area as [W/m2].
            </summary>
            <value>Equipment level per floor area as [W/m2].</value>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.Schedule">
            <summary>
            Name of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile.
            </summary>
            <value>Name of the schedule for the use of equipment over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete equipment profile.</value>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.RadiantFraction">
            <summary>
            Number for the amount of long-wave radiation heat given off by electric equipment. Default value is 0.
            </summary>
            <value>Number for the amount of long-wave radiation heat given off by electric equipment. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.LatentFraction">
            <summary>
            Number for the amount of latent heat given off by electricequipment. Default value is 0.
            </summary>
            <value>Number for the amount of latent heat given off by electricequipment. Default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.LostFraction">
            <summary>
            Number for the amount of “lost” heat being given off by equipment. The default value is 0.
            </summary>
            <value>Number for the amount of “lost” heat being given off by equipment. The default value is 0.</value>
        </member>
        <member name="P:HoneybeeDotNet.GasEquipmentAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>GasEquipmentAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.Equals(HoneybeeDotNet.GasEquipmentAbridged)">
            <summary>
            Returns true if GasEquipmentAbridged instances are equal
            </summary>
            <param name="input">Instance of GasEquipmentAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.GasEquipmentAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Ground">
            <summary>
            Ground
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Ground.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Ground" /> class.
            </summary>
            <param name="type">type (default to &quot;Ground&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.Ground.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Ground.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Ground.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Ground.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Ground object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Ground.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Ground.Equals(HoneybeeDotNet.Ground)">
            <summary>
            Returns true if Ground instances are equal
            </summary>
            <param name="input">Instance of Ground to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Ground.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Ground.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.HumidityCondition">
            <summary>
            Used to specify humidity conditions on a design day.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.HumidityCondition.HumidityTypeEnum">
            <summary>
            Defines HumidityType
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.HumidityCondition.HumidityTypeEnum.Wetbulb">
            <summary>
            Enum Wetbulb for value: Wetbulb
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.HumidityCondition.HumidityTypeEnum.Dewpoint">
            <summary>
            Enum Dewpoint for value: Dewpoint
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.HumidityCondition.HumidityTypeEnum.HumidityRatio">
            <summary>
            Enum HumidityRatio for value: HumidityRatio
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.HumidityCondition.HumidityTypeEnum.Enthalpy">
            <summary>
            Enum Enthalpy for value: Enthalpy
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.HumidityCondition.HumidityType">
            <summary>
            Gets or Sets HumidityType
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.HumidityCondition" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.#ctor(HoneybeeDotNet.HumidityCondition.HumidityTypeEnum,System.Double,System.String,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.HumidityCondition" /> class.
            </summary>
            <param name="humidityType">humidityType (required).</param>
            <param name="humidityValue">The value correcponding to the humidity_type. (required).</param>
            <param name="type">type (default to &quot;HumidityCondition&quot;).</param>
            <param name="barometricPressure">Barometric air pressure on the design day [Pa]. (default to 101325).</param>
            <param name="rain">Boolean to indicate rain on the design day. (default to false).</param>
            <param name="snowOnGround">Boolean to indicate snow on the ground during the design day. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.HumidityCondition.HumidityValue">
            <summary>
            The value correcponding to the humidity_type.
            </summary>
            <value>The value correcponding to the humidity_type.</value>
        </member>
        <member name="P:HoneybeeDotNet.HumidityCondition.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.HumidityCondition.BarometricPressure">
            <summary>
            Barometric air pressure on the design day [Pa].
            </summary>
            <value>Barometric air pressure on the design day [Pa].</value>
        </member>
        <member name="P:HoneybeeDotNet.HumidityCondition.Rain">
            <summary>
            Boolean to indicate rain on the design day.
            </summary>
            <value>Boolean to indicate rain on the design day.</value>
        </member>
        <member name="P:HoneybeeDotNet.HumidityCondition.SnowOnGround">
            <summary>
            Boolean to indicate snow on the ground during the design day.
            </summary>
            <value>Boolean to indicate snow on the ground during the design day.</value>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>HumidityCondition object</returns>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.Equals(HoneybeeDotNet.HumidityCondition)">
            <summary>
            Returns true if HumidityCondition instances are equal
            </summary>
            <param name="input">Instance of HumidityCondition to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.HumidityCondition.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.IdealAirSystemAbridged">
            <summary>
            Provides a model for an ideal HVAC system.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.IdealAirSystemAbridged.EconomizerTypeEnum">
            <summary>
            Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.
            </summary>
            <value>Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.</value>
        </member>
        <member name="F:HoneybeeDotNet.IdealAirSystemAbridged.EconomizerTypeEnum.NoEconomizer">
            <summary>
            Enum NoEconomizer for value: NoEconomizer
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.IdealAirSystemAbridged.EconomizerTypeEnum.DifferentialDryBulb">
            <summary>
            Enum DifferentialDryBulb for value: DifferentialDryBulb
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.IdealAirSystemAbridged.EconomizerTypeEnum.DifferentialEnthalpy">
            <summary>
            Enum DifferentialEnthalpy for value: DifferentialEnthalpy
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.EconomizerType">
            <summary>
            Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.
            </summary>
            <value>Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.</value>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.IdealAirSystemAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.#ctor(System.String,System.String,System.Nullable{HoneybeeDotNet.IdealAirSystemAbridged.EconomizerTypeEnum},System.Boolean,System.Double,System.Double,System.Double,System.Double,HoneybeeDotNet.AnyOf{HoneybeeDotNet.NoLimit,HoneybeeDotNet.Autosize,System.Double},HoneybeeDotNet.AnyOf{HoneybeeDotNet.NoLimit,HoneybeeDotNet.Autosize,System.Double},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.IdealAirSystemAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;IdealAirSystemAbridged&quot;).</param>
            <param name="economizerType">Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone. (default to EconomizerTypeEnum.DifferentialDryBulb).</param>
            <param name="demandControlVentilation">Boolean to note whether demand controlled ventilation should be used on the system, which will vary the amount of ventilation air according to the occupancy schedule of the zone. (default to false).</param>
            <param name="sensibleHeatRecovery">A number between 0 and 1 for the effectiveness of sensible heat recovery within the system. (default to 0).</param>
            <param name="latentHeatRecovery">A number between 0 and 1 for the effectiveness of latent heat recovery within the system. (default to 0).</param>
            <param name="heatingAirTemperature">A number for the maximum heating supply air temperature [C]. (default to 50).</param>
            <param name="coolingAirTemperature">A number for the minimum cooling supply air temperature [C]. (default to 13).</param>
            <param name="heatingLimit">A number for the maximum heating capacity in Watts. This can also be an Autosize object to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be a NoLimit boject to indicate no upper limit to the heating capacity..</param>
            <param name="coolingLimit">A number for the maximum cooling capacity in Watts. This can also be an Autosize object to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be a NoLimit boject to indicate no upper limit to the cooling capacity..</param>
            <param name="heatingAvailability">An optional name of a schedule to set the availability of heating over the course of the simulation..</param>
            <param name="coolingAvailability">An optional name of a schedule to set the availability of cooling over the course of the simulation..</param>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.DemandControlVentilation">
            <summary>
            Boolean to note whether demand controlled ventilation should be used on the system, which will vary the amount of ventilation air according to the occupancy schedule of the zone.
            </summary>
            <value>Boolean to note whether demand controlled ventilation should be used on the system, which will vary the amount of ventilation air according to the occupancy schedule of the zone.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.SensibleHeatRecovery">
            <summary>
            A number between 0 and 1 for the effectiveness of sensible heat recovery within the system.
            </summary>
            <value>A number between 0 and 1 for the effectiveness of sensible heat recovery within the system.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.LatentHeatRecovery">
            <summary>
            A number between 0 and 1 for the effectiveness of latent heat recovery within the system.
            </summary>
            <value>A number between 0 and 1 for the effectiveness of latent heat recovery within the system.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.HeatingAirTemperature">
            <summary>
            A number for the maximum heating supply air temperature [C].
            </summary>
            <value>A number for the maximum heating supply air temperature [C].</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.CoolingAirTemperature">
            <summary>
            A number for the minimum cooling supply air temperature [C].
            </summary>
            <value>A number for the minimum cooling supply air temperature [C].</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.HeatingLimit">
            <summary>
            A number for the maximum heating capacity in Watts. This can also be an Autosize object to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be a NoLimit boject to indicate no upper limit to the heating capacity.
            </summary>
            <value>A number for the maximum heating capacity in Watts. This can also be an Autosize object to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be a NoLimit boject to indicate no upper limit to the heating capacity.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.CoolingLimit">
            <summary>
            A number for the maximum cooling capacity in Watts. This can also be an Autosize object to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be a NoLimit boject to indicate no upper limit to the cooling capacity.
            </summary>
            <value>A number for the maximum cooling capacity in Watts. This can also be an Autosize object to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be a NoLimit boject to indicate no upper limit to the cooling capacity.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.HeatingAvailability">
            <summary>
            An optional name of a schedule to set the availability of heating over the course of the simulation.
            </summary>
            <value>An optional name of a schedule to set the availability of heating over the course of the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.IdealAirSystemAbridged.CoolingAvailability">
            <summary>
            An optional name of a schedule to set the availability of cooling over the course of the simulation.
            </summary>
            <value>An optional name of a schedule to set the availability of cooling over the course of the simulation.</value>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>IdealAirSystemAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.Equals(HoneybeeDotNet.IdealAirSystemAbridged)">
            <summary>
            Returns true if IdealAirSystemAbridged instances are equal
            </summary>
            <param name="input">Instance of IdealAirSystemAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.IdealAirSystemAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.InfiltrationAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.InfiltrationAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.#ctor(System.String,System.Double,System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.InfiltrationAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="flowPerExteriorArea">Number for the infiltration per exterior surface area in m3/s-m2. (required).</param>
            <param name="schedule">Name of the schedule for the infiltration over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the flow_per_exterior_area to yield a complete infiltration profile. (required).</param>
            <param name="type">type (default to &quot;InfiltrationAbridged&quot;).</param>
            <param name="constantCoefficient">constantCoefficient (default to 1).</param>
            <param name="temperatureCoefficient">temperatureCoefficient (default to 0).</param>
            <param name="velocityCoefficient">velocityCoefficient (default to 0).</param>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.FlowPerExteriorArea">
            <summary>
            Number for the infiltration per exterior surface area in m3/s-m2.
            </summary>
            <value>Number for the infiltration per exterior surface area in m3/s-m2.</value>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.Schedule">
            <summary>
            Name of the schedule for the infiltration over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the flow_per_exterior_area to yield a complete infiltration profile.
            </summary>
            <value>Name of the schedule for the infiltration over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the flow_per_exterior_area to yield a complete infiltration profile.</value>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.ConstantCoefficient">
            <summary>
            Gets or Sets ConstantCoefficient
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.TemperatureCoefficient">
            <summary>
            Gets or Sets TemperatureCoefficient
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.InfiltrationAbridged.VelocityCoefficient">
            <summary>
            Gets or Sets VelocityCoefficient
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>InfiltrationAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.Equals(HoneybeeDotNet.InfiltrationAbridged)">
            <summary>
            Returns true if InfiltrationAbridged instances are equal
            </summary>
            <param name="input">Instance of InfiltrationAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.InfiltrationAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.LightingAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.LightingAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.#ctor(System.String,System.Double,System.String,System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.LightingAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="wattsPerArea">Lighting per floor area as [W/m2]. (required).</param>
            <param name="schedule">Name of the schedule for the use of lights over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete lighting profile. (required).</param>
            <param name="type">type (default to &quot;LightingAbridged&quot;).</param>
            <param name="visibleFraction">The fraction of heat from lights that goes into the zone as visible (short-wave) radiation. The default value is &#x60;0.25&#x60;. (default to 0.25).</param>
            <param name="radiantFraction">The fraction of heat from lights that is long-wave radiation. Default value is &#x60;0.32&#x60;. (default to 0.32).</param>
            <param name="returnAirFraction">The fraction of the heat from lights that goes into the zone return air. Default value is &#x60;0&#x60;. (default to 0.0).</param>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.WattsPerArea">
            <summary>
            Lighting per floor area as [W/m2].
            </summary>
            <value>Lighting per floor area as [W/m2].</value>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.Schedule">
            <summary>
            Name of the schedule for the use of lights over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete lighting profile.
            </summary>
            <value>Name of the schedule for the use of lights over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the watts_per_area to yield a complete lighting profile.</value>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.VisibleFraction">
            <summary>
            The fraction of heat from lights that goes into the zone as visible (short-wave) radiation. The default value is &#x60;0.25&#x60;.
            </summary>
            <value>The fraction of heat from lights that goes into the zone as visible (short-wave) radiation. The default value is &#x60;0.25&#x60;.</value>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.RadiantFraction">
            <summary>
            The fraction of heat from lights that is long-wave radiation. Default value is &#x60;0.32&#x60;.
            </summary>
            <value>The fraction of heat from lights that is long-wave radiation. Default value is &#x60;0.32&#x60;.</value>
        </member>
        <member name="P:HoneybeeDotNet.LightingAbridged.ReturnAirFraction">
            <summary>
            The fraction of the heat from lights that goes into the zone return air. Default value is &#x60;0&#x60;.
            </summary>
            <value>The fraction of the heat from lights that goes into the zone return air. Default value is &#x60;0&#x60;.</value>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>LightingAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.Equals(HoneybeeDotNet.LightingAbridged)">
            <summary>
            Returns true if LightingAbridged instances are equal
            </summary>
            <param name="input">Instance of LightingAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.LightingAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Model">
            <summary>
            Base class for all objects requiring a valid names for all engines.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.Model.UnitsEnum">
            <summary>
            Text indicating the units in which the model geometry exists. This is used to scale the geometry to the correct units for simulation engines like EnergyPlus, which requires all geometry be in meters.
            </summary>
            <value>Text indicating the units in which the model geometry exists. This is used to scale the geometry to the correct units for simulation engines like EnergyPlus, which requires all geometry be in meters.</value>
        </member>
        <member name="F:HoneybeeDotNet.Model.UnitsEnum.Meters">
            <summary>
            Enum Meters for value: Meters
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Model.UnitsEnum.Millimeters">
            <summary>
            Enum Millimeters for value: Millimeters
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Model.UnitsEnum.Feet">
            <summary>
            Enum Feet for value: Feet
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Model.UnitsEnum.Inches">
            <summary>
            Enum Inches for value: Inches
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.Model.UnitsEnum.Centimeters">
            <summary>
            Enum Centimeters for value: Centimeters
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Model.Units">
            <summary>
            Text indicating the units in which the model geometry exists. This is used to scale the geometry to the correct units for simulation engines like EnergyPlus, which requires all geometry be in meters.
            </summary>
            <value>Text indicating the units in which the model geometry exists. This is used to scale the geometry to the correct units for simulation engines like EnergyPlus, which requires all geometry be in meters.</value>
        </member>
        <member name="M:HoneybeeDotNet.Model.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Model" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Model.#ctor(System.String,HoneybeeDotNet.ModelProperties,System.String,System.String,System.Collections.Generic.List{HoneybeeDotNet.Room},System.Collections.Generic.List{HoneybeeDotNet.Face},System.Collections.Generic.List{HoneybeeDotNet.Shade},System.Collections.Generic.List{HoneybeeDotNet.Aperture},System.Collections.Generic.List{HoneybeeDotNet.Door},System.Double,System.Nullable{HoneybeeDotNet.Model.UnitsEnum},System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Model" /> class.
            </summary>
            <param name="name">Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters. (required).</param>
            <param name="properties">Extension properties for particular simulation engines (Radiance, EnergyPlus). (required).</param>
            <param name="displayName">Display name of the object with no restrictions..</param>
            <param name="type">type (default to &quot;Model&quot;).</param>
            <param name="rooms">A list of Rooms in the model..</param>
            <param name="orphanedFaces">A list of Faces in the model that lack a parent Room. Note that orphaned Faces are not acceptable for Models that are to be exported for energy simulation..</param>
            <param name="orphanedShades">A list of Shades in the model that lack a parent..</param>
            <param name="orphanedApertures">A list of Apertures in the model that lack a parent Face. Note that orphaned Apertures are not acceptable for Models that are to be exported for energy simulation..</param>
            <param name="orphanedDoors">A list of Doors in the model that lack a parent Face. Note that orphaned Doors are not acceptable for Models that are to be exported for energy simulation..</param>
            <param name="northAngle">The clockwise north direction in degrees. (default to 0).</param>
            <param name="units">Text indicating the units in which the model geometry exists. This is used to scale the geometry to the correct units for simulation engines like EnergyPlus, which requires all geometry be in meters. (default to UnitsEnum.Meters).</param>
            <param name="tolerance">The maximum difference between x, y, and z values at which vertices are considered equivalent. This value should be in the Model units and it is used in a variety of checks, including checks for whether Room faces form a closed volume and subsequently correcting all face normals point outward from the Room. A value of 0 will result in no attempt to evaluate whether Room volumes are closed or check face direction. So it is recommended that this always be a positive number when such checks have not been performed on a Model. Typical tolerances for builing geometry range from 0.1 to 0.0001 depending on the units of the geometry. (default to 0).</param>
            <param name="angleTolerance">The max angle difference in degrees that vertices are allowed to differ from one another in order to consider them colinear. This value is used in a variety of checks, including checks for whether Room faces form a closed volume and subsequently correcting all face normals point outward from the Room. A value of 0 will result in no attempt to evaluate whether the Room volumes is closed or check face direction. So it is recommended that this always be a positive number when such checks have not been performed on a given Model. Typical tolerances for builing geometry are often around 1 degree. (default to 0).</param>
        </member>
        <member name="P:HoneybeeDotNet.Model.Name">
            <summary>
            Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.Properties">
            <summary>
            Extension properties for particular simulation engines (Radiance, EnergyPlus).
            </summary>
            <value>Extension properties for particular simulation engines (Radiance, EnergyPlus).</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.DisplayName">
            <summary>
            Display name of the object with no restrictions.
            </summary>
            <value>Display name of the object with no restrictions.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Model.Rooms">
            <summary>
            A list of Rooms in the model.
            </summary>
            <value>A list of Rooms in the model.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.OrphanedFaces">
            <summary>
            A list of Faces in the model that lack a parent Room. Note that orphaned Faces are not acceptable for Models that are to be exported for energy simulation.
            </summary>
            <value>A list of Faces in the model that lack a parent Room. Note that orphaned Faces are not acceptable for Models that are to be exported for energy simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.OrphanedShades">
            <summary>
            A list of Shades in the model that lack a parent.
            </summary>
            <value>A list of Shades in the model that lack a parent.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.OrphanedApertures">
            <summary>
            A list of Apertures in the model that lack a parent Face. Note that orphaned Apertures are not acceptable for Models that are to be exported for energy simulation.
            </summary>
            <value>A list of Apertures in the model that lack a parent Face. Note that orphaned Apertures are not acceptable for Models that are to be exported for energy simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.OrphanedDoors">
            <summary>
            A list of Doors in the model that lack a parent Face. Note that orphaned Doors are not acceptable for Models that are to be exported for energy simulation.
            </summary>
            <value>A list of Doors in the model that lack a parent Face. Note that orphaned Doors are not acceptable for Models that are to be exported for energy simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.NorthAngle">
            <summary>
            The clockwise north direction in degrees.
            </summary>
            <value>The clockwise north direction in degrees.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.Tolerance">
            <summary>
            The maximum difference between x, y, and z values at which vertices are considered equivalent. This value should be in the Model units and it is used in a variety of checks, including checks for whether Room faces form a closed volume and subsequently correcting all face normals point outward from the Room. A value of 0 will result in no attempt to evaluate whether Room volumes are closed or check face direction. So it is recommended that this always be a positive number when such checks have not been performed on a Model. Typical tolerances for builing geometry range from 0.1 to 0.0001 depending on the units of the geometry.
            </summary>
            <value>The maximum difference between x, y, and z values at which vertices are considered equivalent. This value should be in the Model units and it is used in a variety of checks, including checks for whether Room faces form a closed volume and subsequently correcting all face normals point outward from the Room. A value of 0 will result in no attempt to evaluate whether Room volumes are closed or check face direction. So it is recommended that this always be a positive number when such checks have not been performed on a Model. Typical tolerances for builing geometry range from 0.1 to 0.0001 depending on the units of the geometry.</value>
        </member>
        <member name="P:HoneybeeDotNet.Model.AngleTolerance">
            <summary>
            The max angle difference in degrees that vertices are allowed to differ from one another in order to consider them colinear. This value is used in a variety of checks, including checks for whether Room faces form a closed volume and subsequently correcting all face normals point outward from the Room. A value of 0 will result in no attempt to evaluate whether the Room volumes is closed or check face direction. So it is recommended that this always be a positive number when such checks have not been performed on a given Model. Typical tolerances for builing geometry are often around 1 degree.
            </summary>
            <value>The max angle difference in degrees that vertices are allowed to differ from one another in order to consider them colinear. This value is used in a variety of checks, including checks for whether Room faces form a closed volume and subsequently correcting all face normals point outward from the Room. A value of 0 will result in no attempt to evaluate whether the Room volumes is closed or check face direction. So it is recommended that this always be a positive number when such checks have not been performed on a given Model. Typical tolerances for builing geometry are often around 1 degree.</value>
        </member>
        <member name="M:HoneybeeDotNet.Model.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Model.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Model.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Model object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Model.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Model.Equals(HoneybeeDotNet.Model)">
            <summary>
            Returns true if Model instances are equal
            </summary>
            <param name="input">Instance of Model to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Model.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Model.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ModelEnergyProperties">
            <summary>
            ModelEnergyProperties
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum">
            <summary>
            Text for the terrain in which the model sits. This is used to determine the wind profile over the height of the rooms.
            </summary>
            <value>Text for the terrain in which the model sits. This is used to determine the wind profile over the height of the rooms.</value>
        </member>
        <member name="F:HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum.Ocean">
            <summary>
            Enum Ocean for value: Ocean
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum.Country">
            <summary>
            Enum Country for value: Country
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum.Suburbs">
            <summary>
            Enum Suburbs for value: Suburbs
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum.Urban">
            <summary>
            Enum Urban for value: Urban
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum.City">
            <summary>
            Enum City for value: City
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.TerrainType">
            <summary>
            Text for the terrain in which the model sits. This is used to determine the wind profile over the height of the rooms.
            </summary>
            <value>Text for the terrain in which the model sits. This is used to determine the wind profile over the height of the rooms.</value>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ModelEnergyProperties" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.#ctor(System.Collections.Generic.List{HoneybeeDotNet.AnyOf{HoneybeeDotNet.OpaqueConstructionAbridged,HoneybeeDotNet.WindowConstructionAbridged,HoneybeeDotNet.ShadeConstruction}},System.Collections.Generic.List{HoneybeeDotNet.AnyOf{HoneybeeDotNet.EnergyMaterial,HoneybeeDotNet.EnergyMaterialNoMass,HoneybeeDotNet.EnergyWindowMaterialGas,HoneybeeDotNet.EnergyWindowMaterialGasCustom,HoneybeeDotNet.EnergyWindowMaterialGasMixture,HoneybeeDotNet.EnergyWindowMaterialSimpleGlazSys,HoneybeeDotNet.EnergyWindowMaterialBlind,HoneybeeDotNet.EnergyWindowMaterialGlazing,HoneybeeDotNet.EnergyWindowMaterialShade}},System.String,System.Nullable{HoneybeeDotNet.ModelEnergyProperties.TerrainTypeEnum},System.String,System.Collections.Generic.List{HoneybeeDotNet.ConstructionSetAbridged},System.Collections.Generic.List{HoneybeeDotNet.IdealAirSystemAbridged},System.Collections.Generic.List{HoneybeeDotNet.ProgramTypeAbridged},System.Collections.Generic.List{HoneybeeDotNet.AnyOf{HoneybeeDotNet.ScheduleRulesetAbridged,HoneybeeDotNet.ScheduleFixedIntervalAbridged}},System.Collections.Generic.List{HoneybeeDotNet.ScheduleTypeLimit})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ModelEnergyProperties" /> class.
            </summary>
            <param name="constructions">A list of all unique constructions in the model. This includes constructions across all Faces, Apertures, Doors, Shades, Room ConstructionSets, and the global_construction_set. (required).</param>
            <param name="materials">A list of all unique materials in the model. This includes materials needed to make the Model constructions. (required).</param>
            <param name="type">type (default to &quot;ModelEnergyProperties&quot;).</param>
            <param name="terrainType">Text for the terrain in which the model sits. This is used to determine the wind profile over the height of the rooms. (default to TerrainTypeEnum.City).</param>
            <param name="globalConstructionSet">Name for the ConstructionSet to be used for all objects lacking their own construction or a parent Room construction_set. This ConstructionSet must appear under the Model construction_sets..</param>
            <param name="constructionSets">List of all ConstructionSets in the Model..</param>
            <param name="hvacs">List of all HVAC systems in the Model..</param>
            <param name="programTypes">List of all ProgramTypes in the Model..</param>
            <param name="schedules">A list of all unique schedules in the model. This includes schedules across all HVAC systems, ProgramTypes, Rooms, and Shades..</param>
            <param name="scheduleTypeLimits">A list of all unique ScheduleTypeLimits in the model. This all ScheduleTypeLimits needed to make the Model schedules..</param>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.Constructions">
            <summary>
            A list of all unique constructions in the model. This includes constructions across all Faces, Apertures, Doors, Shades, Room ConstructionSets, and the global_construction_set.
            </summary>
            <value>A list of all unique constructions in the model. This includes constructions across all Faces, Apertures, Doors, Shades, Room ConstructionSets, and the global_construction_set.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.Materials">
            <summary>
            A list of all unique materials in the model. This includes materials needed to make the Model constructions.
            </summary>
            <value>A list of all unique materials in the model. This includes materials needed to make the Model constructions.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.GlobalConstructionSet">
            <summary>
            Name for the ConstructionSet to be used for all objects lacking their own construction or a parent Room construction_set. This ConstructionSet must appear under the Model construction_sets.
            </summary>
            <value>Name for the ConstructionSet to be used for all objects lacking their own construction or a parent Room construction_set. This ConstructionSet must appear under the Model construction_sets.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.ConstructionSets">
            <summary>
            List of all ConstructionSets in the Model.
            </summary>
            <value>List of all ConstructionSets in the Model.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.Hvacs">
            <summary>
            List of all HVAC systems in the Model.
            </summary>
            <value>List of all HVAC systems in the Model.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.ProgramTypes">
            <summary>
            List of all ProgramTypes in the Model.
            </summary>
            <value>List of all ProgramTypes in the Model.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.Schedules">
            <summary>
            A list of all unique schedules in the model. This includes schedules across all HVAC systems, ProgramTypes, Rooms, and Shades.
            </summary>
            <value>A list of all unique schedules in the model. This includes schedules across all HVAC systems, ProgramTypes, Rooms, and Shades.</value>
        </member>
        <member name="P:HoneybeeDotNet.ModelEnergyProperties.ScheduleTypeLimits">
            <summary>
            A list of all unique ScheduleTypeLimits in the model. This all ScheduleTypeLimits needed to make the Model schedules.
            </summary>
            <value>A list of all unique ScheduleTypeLimits in the model. This all ScheduleTypeLimits needed to make the Model schedules.</value>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ModelEnergyProperties object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.Equals(HoneybeeDotNet.ModelEnergyProperties)">
            <summary>
            Returns true if ModelEnergyProperties instances are equal
            </summary>
            <param name="input">Instance of ModelEnergyProperties to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelEnergyProperties.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ModelProperties">
            <summary>
            ModelProperties
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.#ctor(System.String,HoneybeeDotNet.ModelEnergyProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ModelProperties" /> class.
            </summary>
            <param name="type">type (default to &quot;ModelProperties&quot;).</param>
            <param name="energy">energy.</param>
        </member>
        <member name="P:HoneybeeDotNet.ModelProperties.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ModelProperties.Energy">
            <summary>
            Gets or Sets Energy
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ModelProperties object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.Equals(HoneybeeDotNet.ModelProperties)">
            <summary>
            Returns true if ModelProperties instances are equal
            </summary>
            <param name="input">Instance of ModelProperties to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ModelProperties.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.NoLimit">
            <summary>
            NoLimit
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.NoLimit" /> class.
            </summary>
            <param name="type">type (default to &quot;NoLimit&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.NoLimit.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>NoLimit object</returns>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.Equals(HoneybeeDotNet.NoLimit)">
            <summary>
            Returns true if NoLimit instances are equal
            </summary>
            <param name="input">Instance of NoLimit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.NoLimit.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.OpaqueConstructionAbridged">
            <summary>
            Construction for opaque objects (Face, Shade, Door).
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.OpaqueConstructionAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.#ctor(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.OpaqueConstructionAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="layers">List of strings for material names. The order of the materials is from exterior to interior. (required).</param>
            <param name="type">type (default to &quot;OpaqueConstructionAbridged&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.OpaqueConstructionAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.OpaqueConstructionAbridged.Layers">
            <summary>
            List of strings for material names. The order of the materials is from exterior to interior.
            </summary>
            <value>List of strings for material names. The order of the materials is from exterior to interior.</value>
        </member>
        <member name="P:HoneybeeDotNet.OpaqueConstructionAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>OpaqueConstructionAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.Equals(HoneybeeDotNet.OpaqueConstructionAbridged)">
            <summary>
            Returns true if OpaqueConstructionAbridged instances are equal
            </summary>
            <param name="input">Instance of OpaqueConstructionAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.OpaqueConstructionAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Outdoors">
            <summary>
            Outdoors
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.#ctor(System.String,System.Boolean,System.Boolean,HoneybeeDotNet.AnyOf{HoneybeeDotNet.Autocalculate,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Outdoors" /> class.
            </summary>
            <param name="type">type (default to &quot;Outdoors&quot;).</param>
            <param name="sunExposure">A boolean noting whether the boundary is exposed to sun. (default to true).</param>
            <param name="windExposure">A boolean noting whether the boundary is exposed to wind. (default to true).</param>
            <param name="viewFactor">A number for the view factor to the ground. This can also be an Autocalculate object to have the view factor automatically calculated..</param>
        </member>
        <member name="P:HoneybeeDotNet.Outdoors.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Outdoors.SunExposure">
            <summary>
            A boolean noting whether the boundary is exposed to sun.
            </summary>
            <value>A boolean noting whether the boundary is exposed to sun.</value>
        </member>
        <member name="P:HoneybeeDotNet.Outdoors.WindExposure">
            <summary>
            A boolean noting whether the boundary is exposed to wind.
            </summary>
            <value>A boolean noting whether the boundary is exposed to wind.</value>
        </member>
        <member name="P:HoneybeeDotNet.Outdoors.ViewFactor">
            <summary>
            A number for the view factor to the ground. This can also be an Autocalculate object to have the view factor automatically calculated.
            </summary>
            <value>A number for the view factor to the ground. This can also be an Autocalculate object to have the view factor automatically calculated.</value>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Outdoors object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.Equals(HoneybeeDotNet.Outdoors)">
            <summary>
            Returns true if Outdoors instances are equal
            </summary>
            <param name="input">Instance of Outdoors to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="M:HoneybeeDotNet.Outdoors.#ctor">
            <summary>
            Initialize a default Outdoor instance with default autocalculated view factor.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.PeopleAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.PeopleAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.#ctor(System.String,System.Double,System.String,System.String,System.String,System.Double,HoneybeeDotNet.AnyOf{HoneybeeDotNet.Autocalculate,System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.PeopleAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="peoplePerArea">People per floor area expressed as [people/m2] (required).</param>
            <param name="occupancySchedule">Name of a schedule for the occupancy over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the people_per_area to yield a complete occupancy profile. (required).</param>
            <param name="activitySchedule">Name of a schedule for the activity of the occupants over the course of the year. The type of this schedule should be Power and the values of the schedule equal to the number of Watts given off by an individual person in the room. (required).</param>
            <param name="type">type (default to &quot;PeopleAbridged&quot;).</param>
            <param name="radiantFraction">The radiant fraction of sensible heat released by people. The defaultvalue is 0.30. (default to 0.3).</param>
            <param name="latentFraction">Number for the latent fraction of heat gain due to people or an Autocalculate object..</param>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.PeoplePerArea">
            <summary>
            People per floor area expressed as [people/m2]
            </summary>
            <value>People per floor area expressed as [people/m2]</value>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.OccupancySchedule">
            <summary>
            Name of a schedule for the occupancy over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the people_per_area to yield a complete occupancy profile.
            </summary>
            <value>Name of a schedule for the occupancy over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the people_per_area to yield a complete occupancy profile.</value>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.ActivitySchedule">
            <summary>
            Name of a schedule for the activity of the occupants over the course of the year. The type of this schedule should be Power and the values of the schedule equal to the number of Watts given off by an individual person in the room.
            </summary>
            <value>Name of a schedule for the activity of the occupants over the course of the year. The type of this schedule should be Power and the values of the schedule equal to the number of Watts given off by an individual person in the room.</value>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.RadiantFraction">
            <summary>
            The radiant fraction of sensible heat released by people. The defaultvalue is 0.30.
            </summary>
            <value>The radiant fraction of sensible heat released by people. The defaultvalue is 0.30.</value>
        </member>
        <member name="P:HoneybeeDotNet.PeopleAbridged.LatentFraction">
            <summary>
            Number for the latent fraction of heat gain due to people or an Autocalculate object.
            </summary>
            <value>Number for the latent fraction of heat gain due to people or an Autocalculate object.</value>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>PeopleAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.Equals(HoneybeeDotNet.PeopleAbridged)">
            <summary>
            Returns true if PeopleAbridged instances are equal
            </summary>
            <param name="input">Instance of PeopleAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.PeopleAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Plane">
            <summary>
            Plane
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Plane.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Plane" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Plane.#ctor(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.String,System.Collections.Generic.List{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Plane" /> class.
            </summary>
            <param name="n">Plane normal as 3 (x, y, z) values. (required).</param>
            <param name="o">Plane origin as 3 (x, y, z) values (required).</param>
            <param name="type">type (default to &quot;Plane&quot;).</param>
            <param name="x">Plane x-axis as 3 (x, y, z) values. If None, it is autocalculated..</param>
        </member>
        <member name="P:HoneybeeDotNet.Plane.N">
            <summary>
            Plane normal as 3 (x, y, z) values.
            </summary>
            <value>Plane normal as 3 (x, y, z) values.</value>
        </member>
        <member name="P:HoneybeeDotNet.Plane.O">
            <summary>
            Plane origin as 3 (x, y, z) values
            </summary>
            <value>Plane origin as 3 (x, y, z) values</value>
        </member>
        <member name="P:HoneybeeDotNet.Plane.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Plane.X">
            <summary>
            Plane x-axis as 3 (x, y, z) values. If None, it is autocalculated.
            </summary>
            <value>Plane x-axis as 3 (x, y, z) values. If None, it is autocalculated.</value>
        </member>
        <member name="M:HoneybeeDotNet.Plane.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Plane.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Plane.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Plane object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Plane.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Plane.Equals(HoneybeeDotNet.Plane)">
            <summary>
            Returns true if Plane instances are equal
            </summary>
            <param name="input">Instance of Plane to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Plane.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Plane.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ProgramTypeAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ProgramTypeAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.#ctor(System.String,System.String,HoneybeeDotNet.PeopleAbridged,HoneybeeDotNet.LightingAbridged,HoneybeeDotNet.ElectricEquipmentAbridged,HoneybeeDotNet.GasEquipmentAbridged,HoneybeeDotNet.InfiltrationAbridged,HoneybeeDotNet.VentilationAbridged,HoneybeeDotNet.SetpointAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ProgramTypeAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;ProgramTypeAbridged&quot;).</param>
            <param name="people">People to describe the occupancy of the program. If None, no occupancy will be assumed for the program..</param>
            <param name="lighting">Lighting to describe the lighting usage of the program. If None, no lighting will be assumed for the program..</param>
            <param name="electricEquipment">ElectricEquipment to describe the usage of electric equipment within the program. If None, no electric equipment will be assumed..</param>
            <param name="gasEquipment">GasEquipment to describe the usage of gas equipment within the program. If None, no gas equipment will be assumed..</param>
            <param name="infiltration">Infiltration to describe the outdoor air leakage of the program. If None, no infiltration will be assumed for the program..</param>
            <param name="ventilation">Ventilation to describe the minimum outdoor air requirement of the program. If None, no ventilation requirement will be assumed..</param>
            <param name="setpoint">Setpoint object to describe the temperature and humidity setpoints of the program.  If None, the ProgramType cannot be assigned to a Room that is conditioned..</param>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.People">
            <summary>
            People to describe the occupancy of the program. If None, no occupancy will be assumed for the program.
            </summary>
            <value>People to describe the occupancy of the program. If None, no occupancy will be assumed for the program.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.Lighting">
            <summary>
            Lighting to describe the lighting usage of the program. If None, no lighting will be assumed for the program.
            </summary>
            <value>Lighting to describe the lighting usage of the program. If None, no lighting will be assumed for the program.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.ElectricEquipment">
            <summary>
            ElectricEquipment to describe the usage of electric equipment within the program. If None, no electric equipment will be assumed.
            </summary>
            <value>ElectricEquipment to describe the usage of electric equipment within the program. If None, no electric equipment will be assumed.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.GasEquipment">
            <summary>
            GasEquipment to describe the usage of gas equipment within the program. If None, no gas equipment will be assumed.
            </summary>
            <value>GasEquipment to describe the usage of gas equipment within the program. If None, no gas equipment will be assumed.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.Infiltration">
            <summary>
            Infiltration to describe the outdoor air leakage of the program. If None, no infiltration will be assumed for the program.
            </summary>
            <value>Infiltration to describe the outdoor air leakage of the program. If None, no infiltration will be assumed for the program.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.Ventilation">
            <summary>
            Ventilation to describe the minimum outdoor air requirement of the program. If None, no ventilation requirement will be assumed.
            </summary>
            <value>Ventilation to describe the minimum outdoor air requirement of the program. If None, no ventilation requirement will be assumed.</value>
        </member>
        <member name="P:HoneybeeDotNet.ProgramTypeAbridged.Setpoint">
            <summary>
            Setpoint object to describe the temperature and humidity setpoints of the program.  If None, the ProgramType cannot be assigned to a Room that is conditioned.
            </summary>
            <value>Setpoint object to describe the temperature and humidity setpoints of the program.  If None, the ProgramType cannot be assigned to a Room that is conditioned.</value>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ProgramTypeAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.Equals(HoneybeeDotNet.ProgramTypeAbridged)">
            <summary>
            Returns true if ProgramTypeAbridged instances are equal
            </summary>
            <param name="input">Instance of ProgramTypeAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ProgramTypeAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.RoofCeilingSetAbridged">
            <summary>
            A set of constructions for roof and ceiling assemblies.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.RoofCeilingSetAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;RoofCeilingSetAbridged&quot;).</param>
            <param name="interiorConstruction">Name for an OpaqueConstruction for ceilings with a Surface or Adiabatic boundary condition..</param>
            <param name="exteriorConstruction">Name for an OpaqueConstruction for roofs with an Outdoors boundary condition..</param>
            <param name="groundConstruction">Name for an OpaqueConstruction for roofs with a Ground boundary condition..</param>
        </member>
        <member name="P:HoneybeeDotNet.RoofCeilingSetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.RoofCeilingSetAbridged.InteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for ceilings with a Surface or Adiabatic boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for ceilings with a Surface or Adiabatic boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoofCeilingSetAbridged.ExteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for roofs with an Outdoors boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for roofs with an Outdoors boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoofCeilingSetAbridged.GroundConstruction">
            <summary>
            Name for an OpaqueConstruction for roofs with a Ground boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for roofs with a Ground boundary condition.</value>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>RoofCeilingSetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.Equals(HoneybeeDotNet.RoofCeilingSetAbridged)">
            <summary>
            Returns true if RoofCeilingSetAbridged instances are equal
            </summary>
            <param name="input">Instance of RoofCeilingSetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoofCeilingSetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Room">
            <summary>
            Base class for all objects requiring a valid names for all engines.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Room.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Room" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Room.#ctor(System.String,System.Collections.Generic.List{HoneybeeDotNet.Face},HoneybeeDotNet.RoomPropertiesAbridged,System.String,System.String,System.Collections.Generic.List{HoneybeeDotNet.Shade},System.Collections.Generic.List{HoneybeeDotNet.Shade},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Room" /> class.
            </summary>
            <param name="name">Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters. (required).</param>
            <param name="faces">Faces that together form the closed volume of a room. (required).</param>
            <param name="properties">Extension properties for particular simulation engines (Radiance, EnergyPlus). (required).</param>
            <param name="displayName">Display name of the object with no restrictions..</param>
            <param name="type">type (default to &quot;Room&quot;).</param>
            <param name="indoorShades">Shades assigned to the interior side of this object (eg. partitions, tables)..</param>
            <param name="outdoorShades">Shades assigned to the exterior side of this object (eg. trees, landscaping)..</param>
            <param name="multiplier">An integer noting how many times this Room is repeated. Multipliers are used to speed up the calculation when similar Rooms are repeated more than once. Essentially, a given simulation with the Room is run once and then the result is mutliplied by the multiplier. (default to 1).</param>
        </member>
        <member name="P:HoneybeeDotNet.Room.Name">
            <summary>
            Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.Room.Faces">
            <summary>
            Faces that together form the closed volume of a room.
            </summary>
            <value>Faces that together form the closed volume of a room.</value>
        </member>
        <member name="P:HoneybeeDotNet.Room.Properties">
            <summary>
            Extension properties for particular simulation engines (Radiance, EnergyPlus).
            </summary>
            <value>Extension properties for particular simulation engines (Radiance, EnergyPlus).</value>
        </member>
        <member name="P:HoneybeeDotNet.Room.DisplayName">
            <summary>
            Display name of the object with no restrictions.
            </summary>
            <value>Display name of the object with no restrictions.</value>
        </member>
        <member name="P:HoneybeeDotNet.Room.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.Room.IndoorShades">
            <summary>
            Shades assigned to the interior side of this object (eg. partitions, tables).
            </summary>
            <value>Shades assigned to the interior side of this object (eg. partitions, tables).</value>
        </member>
        <member name="P:HoneybeeDotNet.Room.OutdoorShades">
            <summary>
            Shades assigned to the exterior side of this object (eg. trees, landscaping).
            </summary>
            <value>Shades assigned to the exterior side of this object (eg. trees, landscaping).</value>
        </member>
        <member name="P:HoneybeeDotNet.Room.Multiplier">
            <summary>
            An integer noting how many times this Room is repeated. Multipliers are used to speed up the calculation when similar Rooms are repeated more than once. Essentially, a given simulation with the Room is run once and then the result is mutliplied by the multiplier.
            </summary>
            <value>An integer noting how many times this Room is repeated. Multipliers are used to speed up the calculation when similar Rooms are repeated more than once. Essentially, a given simulation with the Room is run once and then the result is mutliplied by the multiplier.</value>
        </member>
        <member name="M:HoneybeeDotNet.Room.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Room.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Room.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Room object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Room.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Room.Equals(HoneybeeDotNet.Room)">
            <summary>
            Returns true if Room instances are equal
            </summary>
            <param name="input">Instance of Room to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Room.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Room.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.RoomEnergyPropertiesAbridged">
            <summary>
            RoomEnergyPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.#ctor(System.String,System.String,System.String,System.String,HoneybeeDotNet.PeopleAbridged,HoneybeeDotNet.LightingAbridged,HoneybeeDotNet.ElectricEquipmentAbridged,HoneybeeDotNet.GasEquipmentAbridged,HoneybeeDotNet.InfiltrationAbridged,HoneybeeDotNet.VentilationAbridged,HoneybeeDotNet.SetpointAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.RoomEnergyPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;RoomEnergyPropertiesAbridged&quot;).</param>
            <param name="constructionSet">Name of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set..</param>
            <param name="programType">Name of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints..</param>
            <param name="hvac">An optional name of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned..</param>
            <param name="people">People object to describe the occupancy of the Room..</param>
            <param name="lighting">Lighting object to describe the lighting usage of the Room..</param>
            <param name="electricEquipment">ElectricEquipment object to describe the electric equipment usage..</param>
            <param name="gasEquipment">GasEquipment object to describe the gas equipment usage..</param>
            <param name="infiltration">Infiltration object to to describe the outdoor air leakage..</param>
            <param name="ventilation">Ventilation object for the minimum outdoor air requirement..</param>
            <param name="setpoint">Setpoint object for the temperature setpoints of the Room..</param>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.ConstructionSet">
            <summary>
            Name of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set.
            </summary>
            <value>Name of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.ProgramType">
            <summary>
            Name of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints.
            </summary>
            <value>Name of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Hvac">
            <summary>
            An optional name of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned.
            </summary>
            <value>An optional name of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.People">
            <summary>
            People object to describe the occupancy of the Room.
            </summary>
            <value>People object to describe the occupancy of the Room.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Lighting">
            <summary>
            Lighting object to describe the lighting usage of the Room.
            </summary>
            <value>Lighting object to describe the lighting usage of the Room.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.ElectricEquipment">
            <summary>
            ElectricEquipment object to describe the electric equipment usage.
            </summary>
            <value>ElectricEquipment object to describe the electric equipment usage.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.GasEquipment">
            <summary>
            GasEquipment object to describe the gas equipment usage.
            </summary>
            <value>GasEquipment object to describe the gas equipment usage.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Infiltration">
            <summary>
            Infiltration object to to describe the outdoor air leakage.
            </summary>
            <value>Infiltration object to to describe the outdoor air leakage.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Ventilation">
            <summary>
            Ventilation object for the minimum outdoor air requirement.
            </summary>
            <value>Ventilation object for the minimum outdoor air requirement.</value>
        </member>
        <member name="P:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Setpoint">
            <summary>
            Setpoint object for the temperature setpoints of the Room.
            </summary>
            <value>Setpoint object for the temperature setpoints of the Room.</value>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>RoomEnergyPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.Equals(HoneybeeDotNet.RoomEnergyPropertiesAbridged)">
            <summary>
            Returns true if RoomEnergyPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of RoomEnergyPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomEnergyPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.RoomPropertiesAbridged">
            <summary>
            RoomPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.#ctor(System.String,HoneybeeDotNet.RoomEnergyPropertiesAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.RoomPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;RoomPropertiesAbridged&quot;).</param>
            <param name="energy">energy.</param>
        </member>
        <member name="P:HoneybeeDotNet.RoomPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.RoomPropertiesAbridged.Energy">
            <summary>
            Gets or Sets Energy
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>RoomPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.Equals(HoneybeeDotNet.RoomPropertiesAbridged)">
            <summary>
            Returns true if RoomPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of RoomPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.RoomPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.RunPeriod">
            <summary>
            Used to describe the time period over which to run the simulation.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum">
            <summary>
            Text for the day of the week on which the simulation starts.
            </summary>
            <value>Text for the day of the week on which the simulation starts.</value>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Sunday">
            <summary>
            Enum Sunday for value: Sunday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Monday">
            <summary>
            Enum Monday for value: Monday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Tuesday">
            <summary>
            Enum Tuesday for value: Tuesday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Wednesday">
            <summary>
            Enum Wednesday for value: Wednesday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Thursday">
            <summary>
            Enum Thursday for value: Thursday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Friday">
            <summary>
            Enum Friday for value: Friday
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum.Saturday">
            <summary>
            Enum Saturday for value: Saturday
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.StartDayOfWeek">
            <summary>
            Text for the day of the week on which the simulation starts.
            </summary>
            <value>Text for the day of the week on which the simulation starts.</value>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.#ctor(System.String,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.Nullable{HoneybeeDotNet.RunPeriod.StartDayOfWeekEnum},System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},HoneybeeDotNet.DaylightSavingTime,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.RunPeriod" /> class.
            </summary>
            <param name="type">type (default to &quot;RunPeriod&quot;).</param>
            <param name="startDate">A list of two integers for [month, day], representing the date for the start of the run period. Must be before the end date..</param>
            <param name="endDate">A list of two integers for [month, day], representing the date for the end of the run period. Must be after the start date..</param>
            <param name="startDayOfWeek">Text for the day of the week on which the simulation starts. (default to StartDayOfWeekEnum.Sunday).</param>
            <param name="holidays">A list of lists where each sub-list consists of two integers for [month, day], representing a date which is a holiday within the simulation. If None, no holidays are applied..</param>
            <param name="daylightSavingsTime">A DaylightSavingTime to dictate the start and end dates of daylight saving time. If None, no daylight saving time is applied to the simulation..</param>
            <param name="leapYear">Boolean noting whether the simulation will be run for a leap year. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.StartDate">
            <summary>
            A list of two integers for [month, day], representing the date for the start of the run period. Must be before the end date.
            </summary>
            <value>A list of two integers for [month, day], representing the date for the start of the run period. Must be before the end date.</value>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.EndDate">
            <summary>
            A list of two integers for [month, day], representing the date for the end of the run period. Must be after the start date.
            </summary>
            <value>A list of two integers for [month, day], representing the date for the end of the run period. Must be after the start date.</value>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.Holidays">
            <summary>
            A list of lists where each sub-list consists of two integers for [month, day], representing a date which is a holiday within the simulation. If None, no holidays are applied.
            </summary>
            <value>A list of lists where each sub-list consists of two integers for [month, day], representing a date which is a holiday within the simulation. If None, no holidays are applied.</value>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.DaylightSavingsTime">
            <summary>
            A DaylightSavingTime to dictate the start and end dates of daylight saving time. If None, no daylight saving time is applied to the simulation.
            </summary>
            <value>A DaylightSavingTime to dictate the start and end dates of daylight saving time. If None, no daylight saving time is applied to the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.RunPeriod.LeapYear">
            <summary>
            Boolean noting whether the simulation will be run for a leap year.
            </summary>
            <value>Boolean noting whether the simulation will be run for a leap year.</value>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>RunPeriod object</returns>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.Equals(HoneybeeDotNet.RunPeriod)">
            <summary>
            Returns true if RunPeriod instances are equal
            </summary>
            <param name="input">Instance of RunPeriod to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.RunPeriod.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleDay">
            <summary>
            Used to describe the daily schedule for a single simulation day.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleDay" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.#ctor(System.String,System.Collections.Generic.List{System.Double},System.String,System.Collections.Generic.List{System.Collections.Generic.List{System.Int32}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleDay" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="values">A list of floats or integers for the values of the schedule. The length of this list must match the length of the times list. (required).</param>
            <param name="type">type (default to &quot;ScheduleDay&quot;).</param>
            <param name="times">A list of lists with each sub-list possesing 2 values for [hour, minute]. The length of the master list must match the length of the values list. Each time in the master list represents the time of day that the corresponding value begins to take effect. For example [(0,0), (9,0), (17,0)] in combination with the values [0, 1, 0] denotes a schedule value of 0 from 0:00 to 9:00, a value of 1 from 9:00 to 17:00 and 0 from 17:00 to the end of the day. Note that this representation of times as the \&quot;time of beginning\&quot; is a different convention than EnergyPlus, which uses \&quot;time until\&quot;..</param>
            <param name="interpolate">Boolean to note whether values in between times should be linearly interpolated or whether successive values should take effect immediately upon the beginning time corrsponding to them. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleDay.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleDay.Values">
            <summary>
            A list of floats or integers for the values of the schedule. The length of this list must match the length of the times list.
            </summary>
            <value>A list of floats or integers for the values of the schedule. The length of this list must match the length of the times list.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleDay.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleDay.Times">
            <summary>
            A list of lists with each sub-list possesing 2 values for [hour, minute]. The length of the master list must match the length of the values list. Each time in the master list represents the time of day that the corresponding value begins to take effect. For example [(0,0), (9,0), (17,0)] in combination with the values [0, 1, 0] denotes a schedule value of 0 from 0:00 to 9:00, a value of 1 from 9:00 to 17:00 and 0 from 17:00 to the end of the day. Note that this representation of times as the \&quot;time of beginning\&quot; is a different convention than EnergyPlus, which uses \&quot;time until\&quot;.
            </summary>
            <value>A list of lists with each sub-list possesing 2 values for [hour, minute]. The length of the master list must match the length of the values list. Each time in the master list represents the time of day that the corresponding value begins to take effect. For example [(0,0), (9,0), (17,0)] in combination with the values [0, 1, 0] denotes a schedule value of 0 from 0:00 to 9:00, a value of 1 from 9:00 to 17:00 and 0 from 17:00 to the end of the day. Note that this representation of times as the \&quot;time of beginning\&quot; is a different convention than EnergyPlus, which uses \&quot;time until\&quot;.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleDay.Interpolate">
            <summary>
            Boolean to note whether values in between times should be linearly interpolated or whether successive values should take effect immediately upon the beginning time corrsponding to them.
            </summary>
            <value>Boolean to note whether values in between times should be linearly interpolated or whether successive values should take effect immediately upon the beginning time corrsponding to them.</value>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ScheduleDay object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.Equals(HoneybeeDotNet.ScheduleDay)">
            <summary>
            Returns true if ScheduleDay instances are equal
            </summary>
            <param name="input">Instance of ScheduleDay to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleDay.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleFixedIntervalAbridged">
            <summary>
            Used to specify a start date and a list of values for a period of analysis.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleFixedIntervalAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.#ctor(System.String,System.Collections.Generic.List{System.Double},System.String,System.String,System.Int32,System.Collections.Generic.List{System.Int32},System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleFixedIntervalAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="values">A list of timeseries values occuring at each timestep over the course of the simulation. (required).</param>
            <param name="type">type (default to &quot;ScheduleFixedIntervalAbridged&quot;).</param>
            <param name="scheduleTypeLimit">Name of a ScheduleTypeLimit that will be used to validate schedule values against upper/lower limits and assign units to the schedule values. If None, no validation will occur..</param>
            <param name="timestep">An integer for the number of steps per hour that the input values correspond to.  For example, if each value represents 30 minutes, the timestep is 2. For 15 minutes, it is 4. (default to 1).</param>
            <param name="startDate">A list of two integers for [month, day], representing the start date when the schedule values begin to take effect.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case)..</param>
            <param name="placeholderValue"> A value that will be used for all times not covered by the input values. Typically, your simulation should not need to use this value if the input values completely cover the simulation period. (default to 0).</param>
            <param name="interpolate">Boolean to note whether values in between intervals should be linearly interpolated or whether successive values should take effect immediately upon the beginning time corrsponding to them. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Values">
            <summary>
            A list of timeseries values occuring at each timestep over the course of the simulation.
            </summary>
            <value>A list of timeseries values occuring at each timestep over the course of the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.ScheduleTypeLimit">
            <summary>
            Name of a ScheduleTypeLimit that will be used to validate schedule values against upper/lower limits and assign units to the schedule values. If None, no validation will occur.
            </summary>
            <value>Name of a ScheduleTypeLimit that will be used to validate schedule values against upper/lower limits and assign units to the schedule values. If None, no validation will occur.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Timestep">
            <summary>
            An integer for the number of steps per hour that the input values correspond to.  For example, if each value represents 30 minutes, the timestep is 2. For 15 minutes, it is 4.
            </summary>
            <value>An integer for the number of steps per hour that the input values correspond to.  For example, if each value represents 30 minutes, the timestep is 2. For 15 minutes, it is 4.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.StartDate">
            <summary>
            A list of two integers for [month, day], representing the start date when the schedule values begin to take effect.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).
            </summary>
            <value>A list of two integers for [month, day], representing the start date when the schedule values begin to take effect.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.PlaceholderValue">
            <summary>
             A value that will be used for all times not covered by the input values. Typically, your simulation should not need to use this value if the input values completely cover the simulation period.
            </summary>
            <value> A value that will be used for all times not covered by the input values. Typically, your simulation should not need to use this value if the input values completely cover the simulation period.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Interpolate">
            <summary>
            Boolean to note whether values in between intervals should be linearly interpolated or whether successive values should take effect immediately upon the beginning time corrsponding to them.
            </summary>
            <value>Boolean to note whether values in between intervals should be linearly interpolated or whether successive values should take effect immediately upon the beginning time corrsponding to them.</value>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ScheduleFixedIntervalAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.Equals(HoneybeeDotNet.ScheduleFixedIntervalAbridged)">
            <summary>
            Returns true if ScheduleFixedIntervalAbridged instances are equal
            </summary>
            <param name="input">Instance of ScheduleFixedIntervalAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleFixedIntervalAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleRuleAbridged">
            <summary>
            Schedule rule including a ScheduleDay and when it should be applied..
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleRuleAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleRuleAbridged" /> class.
            </summary>
            <param name="scheduleDay">A ScheduleDay object associated with this rule. (required).</param>
            <param name="type">type (default to &quot;ScheduleRuleAbridged&quot;).</param>
            <param name="applySunday">Boolean noting whether to apply schedule_day on Sundays. (default to false).</param>
            <param name="applyMonday">Boolean noting whether to apply schedule_day on Mondays. (default to false).</param>
            <param name="applyTuesday">Boolean noting whether to apply schedule_day on Tuesdays. (default to false).</param>
            <param name="applyWednesday">Boolean noting whether to apply schedule_day on Wednesdays. (default to false).</param>
            <param name="applyThursday">Boolean noting whether to apply schedule_day on Thursdays. (default to false).</param>
            <param name="applyFriday">Boolean noting whether to apply schedule_day on Fridays. (default to false).</param>
            <param name="applySaturday">Boolean noting whether to apply schedule_day on Saturdays. (default to false).</param>
            <param name="applyHoliday">Boolean noting whether to apply schedule_day on Holidays. (default to false).</param>
            <param name="startDate">A list of two integers for [month, day], representing the start date of the period over which the schedule_day will be applied.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case)..</param>
            <param name="endDate">A list of two integers for [month, day], representing the end date of the period over which the schedule_day will be applied.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case)..</param>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ScheduleDay">
            <summary>
            A ScheduleDay object associated with this rule.
            </summary>
            <value>A ScheduleDay object associated with this rule.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplySunday">
            <summary>
            Boolean noting whether to apply schedule_day on Sundays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Sundays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplyMonday">
            <summary>
            Boolean noting whether to apply schedule_day on Mondays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Mondays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplyTuesday">
            <summary>
            Boolean noting whether to apply schedule_day on Tuesdays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Tuesdays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplyWednesday">
            <summary>
            Boolean noting whether to apply schedule_day on Wednesdays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Wednesdays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplyThursday">
            <summary>
            Boolean noting whether to apply schedule_day on Thursdays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Thursdays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplyFriday">
            <summary>
            Boolean noting whether to apply schedule_day on Fridays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Fridays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplySaturday">
            <summary>
            Boolean noting whether to apply schedule_day on Saturdays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Saturdays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.ApplyHoliday">
            <summary>
            Boolean noting whether to apply schedule_day on Holidays.
            </summary>
            <value>Boolean noting whether to apply schedule_day on Holidays.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.StartDate">
            <summary>
            A list of two integers for [month, day], representing the start date of the period over which the schedule_day will be applied.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).
            </summary>
            <value>A list of two integers for [month, day], representing the start date of the period over which the schedule_day will be applied.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRuleAbridged.EndDate">
            <summary>
            A list of two integers for [month, day], representing the end date of the period over which the schedule_day will be applied.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).
            </summary>
            <value>A list of two integers for [month, day], representing the end date of the period over which the schedule_day will be applied.A third integer may be added to denote whether the date should be re-serialized for a leap year (it should be a 1 in this case).</value>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ScheduleRuleAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.Equals(HoneybeeDotNet.ScheduleRuleAbridged)">
            <summary>
            Returns true if ScheduleRuleAbridged instances are equal
            </summary>
            <param name="input">Instance of ScheduleRuleAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRuleAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleRulesetAbridged">
            <summary>
            Used to define a schedule for a default day, further described by ScheduleRule.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleRulesetAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.#ctor(System.String,System.Collections.Generic.List{HoneybeeDotNet.ScheduleDay},System.String,System.String,System.Collections.Generic.List{HoneybeeDotNet.ScheduleRuleAbridged},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleRulesetAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="daySchedules">A list of ScheduleDays that are referenced in the other keys of this ScheduleRulesetAbridged. (required).</param>
            <param name="defaultDaySchedule">A name for the ScheduleDay that will be used for all days when no ScheduleRule is applied. This ScheduleDay must be in the day_schedules. (required).</param>
            <param name="type">type (default to &quot;ScheduleRulesetAbridged&quot;).</param>
            <param name="scheduleRules">A list of ScheduleRuleAbridged that note exceptions to the default_day_schedule. These rules should be ordered from highest to lowest priority..</param>
            <param name="summerDesigndaySchedule">A name for the ScheduleDay that will be used for the summer design day. This ScheduleDay must be in the day_schedules..</param>
            <param name="winterDesigndaySchedule">A name for the ScheduleDay that will be used for the winter design day. This ScheduleDay must be in the day_schedules..</param>
            <param name="scheduleTypeLimit">Name of a ScheduleTypeLimit that will be used to validate schedule values against upper/lower limits and assign units to the schedule values. If None, no validation will occur..</param>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.DaySchedules">
            <summary>
            A list of ScheduleDays that are referenced in the other keys of this ScheduleRulesetAbridged.
            </summary>
            <value>A list of ScheduleDays that are referenced in the other keys of this ScheduleRulesetAbridged.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.DefaultDaySchedule">
            <summary>
            A name for the ScheduleDay that will be used for all days when no ScheduleRule is applied. This ScheduleDay must be in the day_schedules.
            </summary>
            <value>A name for the ScheduleDay that will be used for all days when no ScheduleRule is applied. This ScheduleDay must be in the day_schedules.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.ScheduleRules">
            <summary>
            A list of ScheduleRuleAbridged that note exceptions to the default_day_schedule. These rules should be ordered from highest to lowest priority.
            </summary>
            <value>A list of ScheduleRuleAbridged that note exceptions to the default_day_schedule. These rules should be ordered from highest to lowest priority.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.SummerDesigndaySchedule">
            <summary>
            A name for the ScheduleDay that will be used for the summer design day. This ScheduleDay must be in the day_schedules.
            </summary>
            <value>A name for the ScheduleDay that will be used for the summer design day. This ScheduleDay must be in the day_schedules.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.WinterDesigndaySchedule">
            <summary>
            A name for the ScheduleDay that will be used for the winter design day. This ScheduleDay must be in the day_schedules.
            </summary>
            <value>A name for the ScheduleDay that will be used for the winter design day. This ScheduleDay must be in the day_schedules.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleRulesetAbridged.ScheduleTypeLimit">
            <summary>
            Name of a ScheduleTypeLimit that will be used to validate schedule values against upper/lower limits and assign units to the schedule values. If None, no validation will occur.
            </summary>
            <value>Name of a ScheduleTypeLimit that will be used to validate schedule values against upper/lower limits and assign units to the schedule values. If None, no validation will occur.</value>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ScheduleRulesetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.Equals(HoneybeeDotNet.ScheduleRulesetAbridged)">
            <summary>
            Returns true if ScheduleRulesetAbridged instances are equal
            </summary>
            <param name="input">Instance of ScheduleRulesetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleRulesetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleTypeLimit">
            <summary>
            Specifies the data types and limits for values contained in schedules.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleTypeLimit.NumericTypeEnum">
            <summary>
            Defines NumericType
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.NumericTypeEnum.Continuous">
            <summary>
            Enum Continuous for value: Continuous
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.NumericTypeEnum.Discrete">
            <summary>
            Enum Discrete for value: Discrete
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleTypeLimit.NumericType">
            <summary>
            Gets or Sets NumericType
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum">
            <summary>
            Defines UnitType
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Dimensionless">
            <summary>
            Enum Dimensionless for value: Dimensionless
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Temperature">
            <summary>
            Enum Temperature for value: Temperature
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.DeltaTemperature">
            <summary>
            Enum DeltaTemperature for value: DeltaTemperature
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.PrecipitationRate">
            <summary>
            Enum PrecipitationRate for value: PrecipitationRate
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Angle">
            <summary>
            Enum Angle for value: Angle
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.ConvectionCoefficient">
            <summary>
            Enum ConvectionCoefficient for value: ConvectionCoefficient
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.ActivityLevel">
            <summary>
            Enum ActivityLevel for value: ActivityLevel
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Velocity">
            <summary>
            Enum Velocity for value: Velocity
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Capacity">
            <summary>
            Enum Capacity for value: Capacity
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Power">
            <summary>
            Enum Power for value: Power
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Availability">
            <summary>
            Enum Availability for value: Availability
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Percent">
            <summary>
            Enum Percent for value: Percent
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Control">
            <summary>
            Enum Control for value: Control
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum.Mode">
            <summary>
            Enum Mode for value: Mode
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleTypeLimit.UnitType">
            <summary>
            Gets or Sets UnitType
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleTypeLimit" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.#ctor(System.String,System.String,HoneybeeDotNet.AnyOf{HoneybeeDotNet.NoLimit,System.Double},HoneybeeDotNet.AnyOf{HoneybeeDotNet.NoLimit,System.Double},System.Nullable{HoneybeeDotNet.ScheduleTypeLimit.NumericTypeEnum},System.Nullable{HoneybeeDotNet.ScheduleTypeLimit.UnitTypeEnum})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ScheduleTypeLimit" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;ScheduleTypeLimit&quot;).</param>
            <param name="lowerLimit">Lower limit for the schedule type or NoLimit..</param>
            <param name="upperLimit">Upper limit for the schedule type or NoLimit..</param>
            <param name="numericType">numericType (default to NumericTypeEnum.Continuous).</param>
            <param name="unitType">unitType (default to UnitTypeEnum.Dimensionless).</param>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleTypeLimit.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleTypeLimit.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleTypeLimit.LowerLimit">
            <summary>
            Lower limit for the schedule type or NoLimit.
            </summary>
            <value>Lower limit for the schedule type or NoLimit.</value>
        </member>
        <member name="P:HoneybeeDotNet.ScheduleTypeLimit.UpperLimit">
            <summary>
            Upper limit for the schedule type or NoLimit.
            </summary>
            <value>Upper limit for the schedule type or NoLimit.</value>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ScheduleTypeLimit object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.Equals(HoneybeeDotNet.ScheduleTypeLimit)">
            <summary>
            Returns true if ScheduleTypeLimit instances are equal
            </summary>
            <param name="input">Instance of ScheduleTypeLimit to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ScheduleTypeLimit.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.SetpointAbridged">
            <summary>
            Used to specify information about the setpoint schedule.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.SetpointAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.SetpointAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="coolingSchedule">Name of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C]. (required).</param>
            <param name="heatingSchedule">Name of the schedule for the heating setpoint. The values in this schedule should be temperature in [C]. (required).</param>
            <param name="type">type (default to &quot;SetpointAbridged&quot;).</param>
            <param name="humidificationSchedule">Name of the schedule for the humidification setpoint. The values in this schedule should be in [%]..</param>
            <param name="dehumidificationSchedule">Name of the schedule for the dehumidification setpoint. The values in this schedule should be in [%]..</param>
        </member>
        <member name="P:HoneybeeDotNet.SetpointAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.SetpointAbridged.CoolingSchedule">
            <summary>
            Name of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C].
            </summary>
            <value>Name of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C].</value>
        </member>
        <member name="P:HoneybeeDotNet.SetpointAbridged.HeatingSchedule">
            <summary>
            Name of the schedule for the heating setpoint. The values in this schedule should be temperature in [C].
            </summary>
            <value>Name of the schedule for the heating setpoint. The values in this schedule should be temperature in [C].</value>
        </member>
        <member name="P:HoneybeeDotNet.SetpointAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.SetpointAbridged.HumidificationSchedule">
            <summary>
            Name of the schedule for the humidification setpoint. The values in this schedule should be in [%].
            </summary>
            <value>Name of the schedule for the humidification setpoint. The values in this schedule should be in [%].</value>
        </member>
        <member name="P:HoneybeeDotNet.SetpointAbridged.DehumidificationSchedule">
            <summary>
            Name of the schedule for the dehumidification setpoint. The values in this schedule should be in [%].
            </summary>
            <value>Name of the schedule for the dehumidification setpoint. The values in this schedule should be in [%].</value>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>SetpointAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.Equals(HoneybeeDotNet.SetpointAbridged)">
            <summary>
            Returns true if SetpointAbridged instances are equal
            </summary>
            <param name="input">Instance of SetpointAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.SetpointAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Shade">
            <summary>
            Base class for all objects requiring a valid names for all engines.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Shade.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Shade" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Shade.#ctor(System.String,HoneybeeDotNet.Face3D,HoneybeeDotNet.ShadePropertiesAbridged,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Shade" /> class.
            </summary>
            <param name="name">Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters. (required).</param>
            <param name="geometry">Planar Face3D for the geometry. (required).</param>
            <param name="properties">Extension properties for particular simulation engines (Radiance, EnergyPlus). (required).</param>
            <param name="displayName">Display name of the object with no restrictions..</param>
            <param name="type">type (default to &quot;Shade&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.Shade.Name">
            <summary>
            Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object used in all simulation engines. Must not contain spaces and use only letters, digits and underscores/dashes. It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.Shade.Geometry">
            <summary>
            Planar Face3D for the geometry.
            </summary>
            <value>Planar Face3D for the geometry.</value>
        </member>
        <member name="P:HoneybeeDotNet.Shade.Properties">
            <summary>
            Extension properties for particular simulation engines (Radiance, EnergyPlus).
            </summary>
            <value>Extension properties for particular simulation engines (Radiance, EnergyPlus).</value>
        </member>
        <member name="P:HoneybeeDotNet.Shade.DisplayName">
            <summary>
            Display name of the object with no restrictions.
            </summary>
            <value>Display name of the object with no restrictions.</value>
        </member>
        <member name="P:HoneybeeDotNet.Shade.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Shade.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Shade.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Shade.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Shade object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Shade.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Shade.Equals(HoneybeeDotNet.Shade)">
            <summary>
            Returns true if Shade instances are equal
            </summary>
            <param name="input">Instance of Shade to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Shade.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Shade.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ShadeConstruction">
            <summary>
            Construction for Shade objects.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ShadeConstruction" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.#ctor(System.String,System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ShadeConstruction" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;ShadeConstruction&quot;).</param>
            <param name="solarReflectance"> A number for the solar reflectance of the construction. (default to 0.2).</param>
            <param name="visibleReflectance"> A number for the visible reflectance of the construction. (default to 0.2).</param>
            <param name="isSpecular">Boolean to note whether the reflection off the shade is diffuse (False) or specular (True). Set to True if the construction is representing a glass facade or a mirror material. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.ShadeConstruction.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.ShadeConstruction.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ShadeConstruction.SolarReflectance">
            <summary>
             A number for the solar reflectance of the construction.
            </summary>
            <value> A number for the solar reflectance of the construction.</value>
        </member>
        <member name="P:HoneybeeDotNet.ShadeConstruction.VisibleReflectance">
            <summary>
             A number for the visible reflectance of the construction.
            </summary>
            <value> A number for the visible reflectance of the construction.</value>
        </member>
        <member name="P:HoneybeeDotNet.ShadeConstruction.IsSpecular">
            <summary>
            Boolean to note whether the reflection off the shade is diffuse (False) or specular (True). Set to True if the construction is representing a glass facade or a mirror material.
            </summary>
            <value>Boolean to note whether the reflection off the shade is diffuse (False) or specular (True). Set to True if the construction is representing a glass facade or a mirror material.</value>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ShadeConstruction object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.Equals(HoneybeeDotNet.ShadeConstruction)">
            <summary>
            Returns true if ShadeConstruction instances are equal
            </summary>
            <param name="input">Instance of ShadeConstruction to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeConstruction.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ShadeEnergyPropertiesAbridged">
            <summary>
            ShadeEnergyPropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ShadeEnergyPropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;ShadeEnergyPropertiesAbridged&quot;).</param>
            <param name="construction">Name of a ShadeConstruction to set the reflectance and specularity of the Shade. If None, the construction is set by theparent Room construction_set, the Model global_construction_set or (in the case fo an orphaned shade) the EnergyPlus default of 0.2 diffuse reflectance..</param>
            <param name="transmittanceSchedule">Name of a schedule to set the transmittance of the shade, which can vary throughout the simulation. If None, the shade will be completely opauqe..</param>
        </member>
        <member name="P:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.Construction">
            <summary>
            Name of a ShadeConstruction to set the reflectance and specularity of the Shade. If None, the construction is set by theparent Room construction_set, the Model global_construction_set or (in the case fo an orphaned shade) the EnergyPlus default of 0.2 diffuse reflectance.
            </summary>
            <value>Name of a ShadeConstruction to set the reflectance and specularity of the Shade. If None, the construction is set by theparent Room construction_set, the Model global_construction_set or (in the case fo an orphaned shade) the EnergyPlus default of 0.2 diffuse reflectance.</value>
        </member>
        <member name="P:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.TransmittanceSchedule">
            <summary>
            Name of a schedule to set the transmittance of the shade, which can vary throughout the simulation. If None, the shade will be completely opauqe.
            </summary>
            <value>Name of a schedule to set the transmittance of the shade, which can vary throughout the simulation. If None, the shade will be completely opauqe.</value>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ShadeEnergyPropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.Equals(HoneybeeDotNet.ShadeEnergyPropertiesAbridged)">
            <summary>
            Returns true if ShadeEnergyPropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of ShadeEnergyPropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadeEnergyPropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ShadePropertiesAbridged">
            <summary>
            ShadePropertiesAbridged
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.#ctor(System.String,HoneybeeDotNet.ShadeEnergyPropertiesAbridged)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ShadePropertiesAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;ShadePropertiesAbridged&quot;).</param>
            <param name="energy">energy.</param>
        </member>
        <member name="P:HoneybeeDotNet.ShadePropertiesAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ShadePropertiesAbridged.Energy">
            <summary>
            Gets or Sets Energy
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ShadePropertiesAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.Equals(HoneybeeDotNet.ShadePropertiesAbridged)">
            <summary>
            Returns true if ShadePropertiesAbridged instances are equal
            </summary>
            <param name="input">Instance of ShadePropertiesAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadePropertiesAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.ShadowCalculation">
            <summary>
            Used to describe settings for EnergyPlus shadow calculation.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum">
            <summary>
            Defines SolarDistribution
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum.MinimalShadowing">
            <summary>
            Enum MinimalShadowing for value: MinimalShadowing
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum.FullExterior">
            <summary>
            Enum FullExterior for value: FullExterior
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum.FullInteriorAndExterior">
            <summary>
            Enum FullInteriorAndExterior for value: FullInteriorAndExterior
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum.FullExteriorWithReflections">
            <summary>
            Enum FullExteriorWithReflections for value: FullExteriorWithReflections
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum.FullInteriorAndExteriorWithReflections">
            <summary>
            Enum FullInteriorAndExteriorWithReflections for value: FullInteriorAndExteriorWithReflections
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ShadowCalculation.SolarDistribution">
            <summary>
            Gets or Sets SolarDistribution
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.ShadowCalculation.CalculationMethodEnum">
            <summary>
            Defines CalculationMethod
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.CalculationMethodEnum.AverageOverDaysInFrequency">
            <summary>
            Enum AverageOverDaysInFrequency for value: AverageOverDaysInFrequency
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.ShadowCalculation.CalculationMethodEnum.TimestepFrequency">
            <summary>
            Enum TimestepFrequency for value: TimestepFrequency
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ShadowCalculation.CalculationMethod">
            <summary>
            Gets or Sets CalculationMethod
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.#ctor(System.String,System.Nullable{HoneybeeDotNet.ShadowCalculation.SolarDistributionEnum},System.Int32,System.Nullable{HoneybeeDotNet.ShadowCalculation.CalculationMethodEnum},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.ShadowCalculation" /> class.
            </summary>
            <param name="type">type (default to &quot;ShadowCalculation&quot;).</param>
            <param name="solarDistribution">solarDistribution (default to SolarDistributionEnum.FullInteriorAndExteriorWithReflections).</param>
            <param name="calculationFrequency">Integer for the number of days in each period for which a unique shadow calculation will be performed. This field is only used if the AverageOverDaysInFrequency calculation_method is used. (default to 30).</param>
            <param name="calculationMethod">calculationMethod (default to CalculationMethodEnum.AverageOverDaysInFrequency).</param>
            <param name="maximumFigures">Number of allowable figures in shadow overlap calculations. (default to 15000).</param>
        </member>
        <member name="P:HoneybeeDotNet.ShadowCalculation.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.ShadowCalculation.CalculationFrequency">
            <summary>
            Integer for the number of days in each period for which a unique shadow calculation will be performed. This field is only used if the AverageOverDaysInFrequency calculation_method is used.
            </summary>
            <value>Integer for the number of days in each period for which a unique shadow calculation will be performed. This field is only used if the AverageOverDaysInFrequency calculation_method is used.</value>
        </member>
        <member name="P:HoneybeeDotNet.ShadowCalculation.MaximumFigures">
            <summary>
            Number of allowable figures in shadow overlap calculations.
            </summary>
            <value>Number of allowable figures in shadow overlap calculations.</value>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>ShadowCalculation object</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.Equals(HoneybeeDotNet.ShadowCalculation)">
            <summary>
            Returns true if ShadowCalculation instances are equal
            </summary>
            <param name="input">Instance of ShadowCalculation to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.ShadowCalculation.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.SimulationControl">
            <summary>
            Used to specify which types of calculations to run.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.SimulationControl" /> class.
            </summary>
            <param name="type">type (default to &quot;SimulationControl&quot;).</param>
            <param name="doZoneSizing">Boolean for whether the zone sizing calculation should be run. (default to true).</param>
            <param name="doSystemSizing">Boolean for whether the system sizing calculation should be run. (default to true).</param>
            <param name="doPlantSizing">Boolean for whether the plant sizing calculation should be run. (default to true).</param>
            <param name="runForRunPeriods">Boolean for whether the simulation should be run for the sizing periods. (default to true).</param>
            <param name="runForSizingPeriods">Boolean for whether the simulation should be run for the run periods. (default to false).</param>
        </member>
        <member name="P:HoneybeeDotNet.SimulationControl.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.SimulationControl.DoZoneSizing">
            <summary>
            Boolean for whether the zone sizing calculation should be run.
            </summary>
            <value>Boolean for whether the zone sizing calculation should be run.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationControl.DoSystemSizing">
            <summary>
            Boolean for whether the system sizing calculation should be run.
            </summary>
            <value>Boolean for whether the system sizing calculation should be run.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationControl.DoPlantSizing">
            <summary>
            Boolean for whether the plant sizing calculation should be run.
            </summary>
            <value>Boolean for whether the plant sizing calculation should be run.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationControl.RunForRunPeriods">
            <summary>
            Boolean for whether the simulation should be run for the sizing periods.
            </summary>
            <value>Boolean for whether the simulation should be run for the sizing periods.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationControl.RunForSizingPeriods">
            <summary>
            Boolean for whether the simulation should be run for the run periods.
            </summary>
            <value>Boolean for whether the simulation should be run for the run periods.</value>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>SimulationControl object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.Equals(HoneybeeDotNet.SimulationControl)">
            <summary>
            Returns true if SimulationControl instances are equal
            </summary>
            <param name="input">Instance of SimulationControl to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationControl.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.SimulationOutput">
            <summary>
            Lists the outputs to report from the simulation and their format.
            </summary>
        </member>
        <member name="T:HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum">
            <summary>
            Defines ReportingFrequency
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum.Timestep">
            <summary>
            Enum Timestep for value: Timestep
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum.Hourly">
            <summary>
            Enum Hourly for value: Hourly
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum.Daily">
            <summary>
            Enum Daily for value: Daily
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum.Monthly">
            <summary>
            Enum Monthly for value: Monthly
            </summary>
        </member>
        <member name="F:HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum.Annual">
            <summary>
            Enum Annual for value: Annual
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.SimulationOutput.ReportingFrequency">
            <summary>
            Gets or Sets ReportingFrequency
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.#ctor(System.String,System.Nullable{HoneybeeDotNet.SimulationOutput.ReportingFrequencyEnum},System.Boolean,System.Boolean,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.SimulationOutput" /> class.
            </summary>
            <param name="type">type (default to &quot;SimulationOutput&quot;).</param>
            <param name="reportingFrequency">reportingFrequency (default to ReportingFrequencyEnum.Hourly).</param>
            <param name="includeSqlite">Boolean to note whether a SQLite report should be generated from the simulation. (default to true).</param>
            <param name="includeHtml">Boolean to note whether an HTML report should be generated from the simulation. (default to false).</param>
            <param name="outputs">A list of EnergyPlus output names as strings, which are requested from the simulation..</param>
            <param name="summaryReports">A list of EnergyPlus summary report names as strings..</param>
        </member>
        <member name="P:HoneybeeDotNet.SimulationOutput.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.SimulationOutput.IncludeSqlite">
            <summary>
            Boolean to note whether a SQLite report should be generated from the simulation.
            </summary>
            <value>Boolean to note whether a SQLite report should be generated from the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationOutput.IncludeHtml">
            <summary>
            Boolean to note whether an HTML report should be generated from the simulation.
            </summary>
            <value>Boolean to note whether an HTML report should be generated from the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationOutput.Outputs">
            <summary>
            A list of EnergyPlus output names as strings, which are requested from the simulation.
            </summary>
            <value>A list of EnergyPlus output names as strings, which are requested from the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationOutput.SummaryReports">
            <summary>
            A list of EnergyPlus summary report names as strings.
            </summary>
            <value>A list of EnergyPlus summary report names as strings.</value>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>SimulationOutput object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.Equals(HoneybeeDotNet.SimulationOutput)">
            <summary>
            Returns true if SimulationOutput instances are equal
            </summary>
            <param name="input">Instance of SimulationOutput to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationOutput.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.SimulationParameter">
            <summary>
            The complete set of EnergyPlus Simulation Settings.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.#ctor(System.String,HoneybeeDotNet.SimulationOutput,HoneybeeDotNet.RunPeriod,System.Int32,HoneybeeDotNet.SimulationControl,HoneybeeDotNet.ShadowCalculation,HoneybeeDotNet.SizingParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.SimulationParameter" /> class.
            </summary>
            <param name="type">type (default to &quot;SimulationParameter&quot;).</param>
            <param name="output">A SimulationOutput that lists the desired outputs from the simulation and the format in which to report them..</param>
            <param name="runPeriod">A RunPeriod to describe the time period over which to run the simulation..</param>
            <param name="timestep">An integer for the number of timesteps per hour at which the energy calculation will be run. (default to 6).</param>
            <param name="simulationControl">A SimulationControl object that describes which types of calculations to run..</param>
            <param name="shadowCalculation">A ShadowCalculation object describing settings for the EnergyPlus Shadow Calculation..</param>
            <param name="sizingParameter">A SizingParameter object with criteria for sizing the heating and cooling system..</param>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.Output">
            <summary>
            A SimulationOutput that lists the desired outputs from the simulation and the format in which to report them.
            </summary>
            <value>A SimulationOutput that lists the desired outputs from the simulation and the format in which to report them.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.RunPeriod">
            <summary>
            A RunPeriod to describe the time period over which to run the simulation.
            </summary>
            <value>A RunPeriod to describe the time period over which to run the simulation.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.Timestep">
            <summary>
            An integer for the number of timesteps per hour at which the energy calculation will be run.
            </summary>
            <value>An integer for the number of timesteps per hour at which the energy calculation will be run.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.SimulationControl">
            <summary>
            A SimulationControl object that describes which types of calculations to run.
            </summary>
            <value>A SimulationControl object that describes which types of calculations to run.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.ShadowCalculation">
            <summary>
            A ShadowCalculation object describing settings for the EnergyPlus Shadow Calculation.
            </summary>
            <value>A ShadowCalculation object describing settings for the EnergyPlus Shadow Calculation.</value>
        </member>
        <member name="P:HoneybeeDotNet.SimulationParameter.SizingParameter">
            <summary>
            A SizingParameter object with criteria for sizing the heating and cooling system.
            </summary>
            <value>A SizingParameter object with criteria for sizing the heating and cooling system.</value>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>SimulationParameter object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.Equals(HoneybeeDotNet.SimulationParameter)">
            <summary>
            Returns true if SimulationParameter instances are equal
            </summary>
            <param name="input">Instance of SimulationParameter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.SimulationParameter.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.SizingParameter">
            <summary>
            Used to specify heating and cooling sizing criteria and safety factors.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.#ctor(System.String,System.Collections.Generic.List{HoneybeeDotNet.DesignDay},System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.SizingParameter" /> class.
            </summary>
            <param name="type">type (default to &quot;SizingParameter&quot;).</param>
            <param name="designDays">A list of DesignDays that represent the criteria for which the HVAC systems will be sized..</param>
            <param name="heatingFactor">A number that will be multiplied by the peak heating load for each zone in order to size the heating system. (default to 1.25).</param>
            <param name="coolingFactor">A number that will be multiplied by the peak cooling load for each zone in order to size the heating system. (default to 1.15).</param>
        </member>
        <member name="P:HoneybeeDotNet.SizingParameter.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.SizingParameter.DesignDays">
            <summary>
            A list of DesignDays that represent the criteria for which the HVAC systems will be sized.
            </summary>
            <value>A list of DesignDays that represent the criteria for which the HVAC systems will be sized.</value>
        </member>
        <member name="P:HoneybeeDotNet.SizingParameter.HeatingFactor">
            <summary>
            A number that will be multiplied by the peak heating load for each zone in order to size the heating system.
            </summary>
            <value>A number that will be multiplied by the peak heating load for each zone in order to size the heating system.</value>
        </member>
        <member name="P:HoneybeeDotNet.SizingParameter.CoolingFactor">
            <summary>
            A number that will be multiplied by the peak cooling load for each zone in order to size the heating system.
            </summary>
            <value>A number that will be multiplied by the peak cooling load for each zone in order to size the heating system.</value>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>SizingParameter object</returns>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.Equals(HoneybeeDotNet.SizingParameter)">
            <summary>
            Returns true if SizingParameter instances are equal
            </summary>
            <param name="input">Instance of SizingParameter to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.SizingParameter.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.Surface">
            <summary>
            Surface
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Surface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Surface" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Surface.#ctor(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.Surface" /> class.
            </summary>
            <param name="boundaryConditionObjects">A list of up to 3 object names that are adjacent to this one. The first object is always the one that is immediately adjacet and is of the same object type (Face, Aperture, Door). When this boundary condition is applied to a Face, the second object in the tuple will be the parent Room of the adjacent object. When the boundary condition is applied to a sub-face (Door or Aperture), the second object will be the parent Face of the adjacent sub-face and the third object will be the parent Room of the adjacent sub-face. (required).</param>
            <param name="type">type (default to &quot;Surface&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.Surface.BoundaryConditionObjects">
            <summary>
            A list of up to 3 object names that are adjacent to this one. The first object is always the one that is immediately adjacet and is of the same object type (Face, Aperture, Door). When this boundary condition is applied to a Face, the second object in the tuple will be the parent Room of the adjacent object. When the boundary condition is applied to a sub-face (Door or Aperture), the second object will be the parent Face of the adjacent sub-face and the third object will be the parent Room of the adjacent sub-face.
            </summary>
            <value>A list of up to 3 object names that are adjacent to this one. The first object is always the one that is immediately adjacet and is of the same object type (Face, Aperture, Door). When this boundary condition is applied to a Face, the second object in the tuple will be the parent Room of the adjacent object. When the boundary condition is applied to a sub-face (Door or Aperture), the second object will be the parent Face of the adjacent sub-face and the third object will be the parent Room of the adjacent sub-face.</value>
        </member>
        <member name="P:HoneybeeDotNet.Surface.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.Surface.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Surface.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Surface.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>Surface object</returns>
        </member>
        <member name="M:HoneybeeDotNet.Surface.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Surface.Equals(HoneybeeDotNet.Surface)">
            <summary>
            Returns true if Surface instances are equal
            </summary>
            <param name="input">Instance of Surface to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.Surface.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.Surface.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.VentilationAbridged">
            <summary>
            Base class for all objects requiring a valid EnergyPlus name.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.VentilationAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.VentilationAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="type">type (default to &quot;VentilationAbridged&quot;).</param>
            <param name="flowPerPerson">Intensity of ventilation in[] m3/s per person]. Note that setting this value does not mean that ventilation is varied based on real-time occupancy but rather that the design level of ventilation is determined using this value and the People object of the Room. (default to 0).</param>
            <param name="flowPerArea">Intensity of ventilation in [m3/s per m2 of floor area]. (default to 0).</param>
            <param name="airChangesPerHour">Intensity of ventilation in air changes per hour (ACH) for the entire Room. (default to 0).</param>
            <param name="flowPerZone">Intensity of ventilation in m3/s for the entire Room. (default to 0).</param>
            <param name="schedule">Name of the schedule for the ventilation over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the total design flow rate (determined from the sum of the other 4 fields) to yield a complete ventilation profile..</param>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.FlowPerPerson">
            <summary>
            Intensity of ventilation in[] m3/s per person]. Note that setting this value does not mean that ventilation is varied based on real-time occupancy but rather that the design level of ventilation is determined using this value and the People object of the Room.
            </summary>
            <value>Intensity of ventilation in[] m3/s per person]. Note that setting this value does not mean that ventilation is varied based on real-time occupancy but rather that the design level of ventilation is determined using this value and the People object of the Room.</value>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.FlowPerArea">
            <summary>
            Intensity of ventilation in [m3/s per m2 of floor area].
            </summary>
            <value>Intensity of ventilation in [m3/s per m2 of floor area].</value>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.AirChangesPerHour">
            <summary>
            Intensity of ventilation in air changes per hour (ACH) for the entire Room.
            </summary>
            <value>Intensity of ventilation in air changes per hour (ACH) for the entire Room.</value>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.FlowPerZone">
            <summary>
            Intensity of ventilation in m3/s for the entire Room.
            </summary>
            <value>Intensity of ventilation in m3/s for the entire Room.</value>
        </member>
        <member name="P:HoneybeeDotNet.VentilationAbridged.Schedule">
            <summary>
            Name of the schedule for the ventilation over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the total design flow rate (determined from the sum of the other 4 fields) to yield a complete ventilation profile.
            </summary>
            <value>Name of the schedule for the ventilation over the course of the year. The type of this schedule should be Fractional and the fractional values will get multiplied by the total design flow rate (determined from the sum of the other 4 fields) to yield a complete ventilation profile.</value>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>VentilationAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.Equals(HoneybeeDotNet.VentilationAbridged)">
            <summary>
            Returns true if VentilationAbridged instances are equal
            </summary>
            <param name="input">Instance of VentilationAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.VentilationAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.WallSetAbridged">
            <summary>
            A set of constructions for wall assemblies.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.WallSetAbridged" /> class.
            </summary>
            <param name="type">type (default to &quot;WallSetAbridged&quot;).</param>
            <param name="interiorConstruction">Name for an OpaqueConstruction for walls with a Surface or Adiabatic boundary condition..</param>
            <param name="exteriorConstruction">Name for an OpaqueConstruction for walls with an Outdoors boundary condition..</param>
            <param name="groundConstruction">Name for an OpaqueConstruction for walls with a Ground boundary condition..</param>
        </member>
        <member name="P:HoneybeeDotNet.WallSetAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.WallSetAbridged.InteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for walls with a Surface or Adiabatic boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for walls with a Surface or Adiabatic boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.WallSetAbridged.ExteriorConstruction">
            <summary>
            Name for an OpaqueConstruction for walls with an Outdoors boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for walls with an Outdoors boundary condition.</value>
        </member>
        <member name="P:HoneybeeDotNet.WallSetAbridged.GroundConstruction">
            <summary>
            Name for an OpaqueConstruction for walls with a Ground boundary condition.
            </summary>
            <value>Name for an OpaqueConstruction for walls with a Ground boundary condition.</value>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>WallSetAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.Equals(HoneybeeDotNet.WallSetAbridged)">
            <summary>
            Returns true if WallSetAbridged instances are equal
            </summary>
            <param name="input">Instance of WallSetAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.WallSetAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.WindCondition">
            <summary>
            Used to specify wind conditions on a design day.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.WindCondition" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.#ctor(System.Double,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.WindCondition" /> class.
            </summary>
            <param name="windSpeed">Wind speed on the design day [m/s]. (required).</param>
            <param name="type">type (default to &quot;WindCondition&quot;).</param>
            <param name="windDirection">Wind direction on the design day [degrees]. (default to 0).</param>
        </member>
        <member name="P:HoneybeeDotNet.WindCondition.WindSpeed">
            <summary>
            Wind speed on the design day [m/s].
            </summary>
            <value>Wind speed on the design day [m/s].</value>
        </member>
        <member name="P:HoneybeeDotNet.WindCondition.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="P:HoneybeeDotNet.WindCondition.WindDirection">
            <summary>
            Wind direction on the design day [degrees].
            </summary>
            <value>Wind direction on the design day [degrees].</value>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>WindCondition object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.Equals(HoneybeeDotNet.WindCondition)">
            <summary>
            Returns true if WindCondition instances are equal
            </summary>
            <param name="input">Instance of WindCondition to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindCondition.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
        <member name="T:HoneybeeDotNet.WindowConstructionAbridged">
            <summary>
            Construction for window objects (Aperture, Door).
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.WindowConstructionAbridged" /> class.
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.#ctor(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:HoneybeeDotNet.WindowConstructionAbridged" /> class.
            </summary>
            <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
            <param name="layers">List of strings for material names. The order of the materials is from exterior to interior. (required).</param>
            <param name="type">type (default to &quot;WindowConstructionAbridged&quot;).</param>
        </member>
        <member name="P:HoneybeeDotNet.WindowConstructionAbridged.Name">
            <summary>
            Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
            </summary>
            <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        </member>
        <member name="P:HoneybeeDotNet.WindowConstructionAbridged.Layers">
            <summary>
            List of strings for material names. The order of the materials is from exterior to interior.
            </summary>
            <value>List of strings for material names. The order of the materials is from exterior to interior.</value>
        </member>
        <member name="P:HoneybeeDotNet.WindowConstructionAbridged.Type">
            <summary>
            Gets or Sets Type
            </summary>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.ToString">
            <summary>
            Returns the string presentation of the object
            </summary>
            <returns>String presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.ToJson">
            <summary>
            Returns the JSON string presentation of the object
            </summary>
            <returns>JSON string presentation of the object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.FromJson(System.String)">
            <summary>
            Returns the object from JSON string
            </summary>
            <returns>WindowConstructionAbridged object</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.Equals(System.Object)">
            <summary>
            Returns true if objects are equal
            </summary>
            <param name="input">Object to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.Equals(HoneybeeDotNet.WindowConstructionAbridged)">
            <summary>
            Returns true if WindowConstructionAbridged instances are equal
            </summary>
            <param name="input">Instance of WindowConstructionAbridged to be compared</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.GetHashCode">
            <summary>
            Gets the hash code
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:HoneybeeDotNet.WindowConstructionAbridged.System#ComponentModel#DataAnnotations#IValidatableObject#Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            To validate all properties of the instance
            </summary>
            <param name="validationContext">Validation context</param>
            <returns>Validation Result</returns>
        </member>
    </members>
</doc>
